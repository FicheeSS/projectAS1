; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Debug\Terrain.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__67933E53_predefined C++ types (compiler internal) DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__47F37C5A_xtr1common DB 01H
__81812A28_cstddef DB 01H
__7FE5F402_limits DB 01H
__97D3638F_vcruntime_new@h DB 01H
__589FA321_type_traits DB 01H
__B0C4CEA9_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__A29A7DFB_string@h DB 01H
__DD5FCA34_compare DB 01H
__12269DE6_xutility DB 01H
__C69F69CF_tuple DB 01H
__79D216CD_xmemory DB 01H
__374A57BA_xpolymorphic_allocator@h DB 01H
__0D019051_xstring DB 01H
__7242C389_ctype@h DB 01H
__B7987E10_string DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__8AA3BE86_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__C34BF88C_memory DB 01H
__60BC708E_cmath DB 01H
__68B92D9D_xbit_ops@h DB 01H
__0F13B0E8_xhash DB 01H
__BFE0F84B_functional DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__1B354CA2_system_error DB 01H
__8E638758_error_category@hpp DB 01H
__6A2F6E90_generic_category_message@hpp DB 01H
__40124294_generic_category@hpp DB 01H
__D26D9D2F_error_condition@hpp DB 01H
__3962D63E_system_category@hpp DB 01H
__8F0CC994_snprintf@hpp DB 01H
__1E3F03CE_error_handling@hpp DB 01H
__715F1DA6_system_category_message_win32@hpp DB 01H
__43CBA7D1_system_category_condition_win32@hpp DB 01H
__50538843_system_category_impl@hpp DB 01H
__F712C60D_interop_category@hpp DB 01H
__EF0EAF83_xfacet DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__DB6D79E9_error_code@hpp DB 01H
__5F333E2B_std_category@hpp DB 01H
__9FD63021_error_category_impl@hpp DB 01H
__FE33131C_xlocmes DB 01H
__67DA974F_xlocmon DB 01H
__D96D2425_xloctime DB 01H
__8060BA75_path_traits@hpp DB 01H
__7F4A6DA5_facade_iterator_category@hpp DB 01H
__95F8B8C5_ios_state@hpp DB 01H
__A90CBA94_path@hpp DB 01H
__2A8CF5D5_errc@hpp DB 01H
__BC95D0FB_throws@hpp DB 01H
__5B07CD3F_system_error@hpp DB 01H
__3905F18F_atomic_count_std_atomic@hpp DB 01H
__F5F54F0A_intrusive_ref_counter@hpp DB 01H
__A46F1D16_exception@hpp DB 01H
__F999D7FF_file_status@hpp DB 01H
__1A296F52_directory@hpp DB 01H
__E014C2AB_operations@hpp DB 01H
__11D75ABD_convenience@hpp DB 01H
__54B77B77_fstream DB 01H
__8EBAA199_fstream@hpp DB 01H
__146F31B1_string_file@hpp DB 01H
__1589CDA2_algorithm DB 01H
__7DAC732B_implementation_help@hpp DB 01H
__F0DA605E_noncopyable@hpp DB 01H
__87BD284D_as_literal@hpp DB 01H
__83B4E54C_classification@hpp DB 01H
__D4B856F0_classification@hpp DB 01H
__06D58B0B_compare@hpp DB 01H
__8AF9E0D8_finder@hpp DB 01H
__CA9BEDC4_finder@hpp DB 01H
__6B00CD91_exception@hpp DB 01H
__652367E1_current_function@hpp DB 01H
__C1177C72_source_location@hpp DB 01H
__E30F34A7_throw_exception@hpp DB 01H
__3A47AE0D_demangle@hpp DB 01H
__B43DA03A_stl_type_index@hpp DB 01H
__4BC5D66D_function_base@hpp DB 01H
__0C0FE920_ratio DB 01H
__2D75401A___msvc_tzdb@hpp DB 01H
__7BF231E7_optional DB 01H
__324884E2_vector DB 01H
__1347750E_utility DB 01H
__20D3AEFC_forward_list DB 01H
__1B08F288_chrono DB 01H
__491EF713_xfilesystem_abi@h DB 01H
__2B6093AE_list DB 01H
__B111E740_filesystem DB 01H
__B26BA995_regex DB 01H
__97651B1A_InputStream@hpp DB 01H
__471180AA_NonCopyable@hpp DB 01H
__9562F857_Thread@inl DB 01H
__69958C8C_xtree DB 01H
__43D81932_SoundFileReader@hpp DB 01H
__D96B7AB5_SoundFileWriter@hpp DB 01H
__CAABAC85_regex_workaround@hpp DB 01H
__6057B16D_regex_traits_defaults@hpp DB 01H
__6DB635D2_pattern_except@hpp DB 01H
__8A32E06C_stop_token DB 01H
__1806803A_thread DB 01H
__1EA2E370_mutex DB 01H
__D31D80E1_cpp_regex_traits@hpp DB 01H
__4504758E_c_regex_traits@hpp DB 01H
__90A1F774_basetsd@h DB 01H
__3C23D660_guiddef@h DB 01H
__AF541008_winnt@h DB 01H
__0D001789_processthreadsapi@h DB 01H
__F972325D_memoryapi@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__1B9502AC_winuser@h DB 01H
__0396F1A5_stralign@h DB 01H
__2C31B1FF_w32_regex_traits@hpp DB 01H
__69566891_match_flags@hpp DB 01H
__F7B65885_regex_raw_buffer@hpp DB 01H
__3E106F07_basic_regex@hpp DB 01H
__F162022C_set DB 01H
__53DE839F_indexed_bit_flag@hpp DB 01H
__1355BCD7_basic_regex_creator@hpp DB 01H
__C1E22BDE_basic_regex_parser@hpp DB 01H
__0C1C64C3_mem_block_cache@hpp DB 01H
__0CA900EC_perl_matcher_non_recursive@hpp DB 01H
__B8FF9416_perl_matcher@hpp DB 01H
__2FD2E8A5_RessourcePack@h DB 01H
__45449701_ContextSettings@hpp DB 01H
__2EBEF5B1_Drawable@hpp DB 01H
__85B1DDB7_Glyph@hpp DB 01H
__8A8F8F08_Font@hpp DB 01H
__22B38682_Player@h DB 01H
__372D2D08_initializer_list DB 01H
__E458E21C_xstddef DB 01H
__5B368A28_Levels@h DB 01H
__426A6454_Block@h DB 01H
__26DA0A7B_TerrainConstructor@h DB 01H
__9A8E974A_Terrain@h DB 01H
__1792DCCD_Terrain@cpp DB 01H
__A2FF0B9E_istream DB 01H
__1E72EEAC_operator_bool@hpp DB 01H
__A561BCAD_intrusive_ptr@hpp DB 01H
__9C4EC787_iterator_facade@hpp DB 01H
__68A60A21_locale DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__038A2AA6_iterator DB 01H
__B30C2184_iosfwd DB 01H
__AB12F5EE_Rect@inl DB 01H
__6A90FC49_Rect@hpp DB 01H
__1646FDB0_type_index@hpp DB 01H
__F1A7B2D2_primary_transform@hpp DB 01H
__F54903A0_xatomic@h DB 01H
__91B039D1_addressof@hpp DB 01H
__E10A139F_integral_constant@hpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG247619 DB	'Unable to open message catalog: ', 00H
	ORG $+7
$SG247626 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 'x'
	DB	00H, '6', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'o'
	DB	00H, 'c', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	's', 00H, '\', 00H, 'I', 00H, 'U', 00H, 'T', 00H, '\', 00H, 'C'
	DB	00H, '+', 00H, '+', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'u', 00H
	DB	'2', 00H, '\', 00H, 'v', 00H, 'c', 00H, 'p', 00H, 'k', 00H, 'g'
	DB	00H, '_', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, '\', 00H, 'x', 00H, '8'
	DB	00H, '6', 00H, '-', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '\', 00H, 'x', 00H, '8', 00H, '6'
	DB	00H, '-', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 's', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'b', 00H, 'o', 00H
	DB	'o', 00H, 's', 00H, 't', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'e', 00H, 'x', 00H, '\', 00H, 'v', 00H, '5', 00H, '\', 00H
	DB	'w', 00H, '3', 00H, '2', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'e', 00H, 'x', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '.', 00H, 'h', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG247627 DB	'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG247629 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 'x'
	DB	00H, '6', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'o'
	DB	00H, 'c', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	's', 00H, '\', 00H, 'I', 00H, 'U', 00H, 'T', 00H, '\', 00H, 'C'
	DB	00H, '+', 00H, '+', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'u', 00H
	DB	'2', 00H, '\', 00H, 'v', 00H, 'c', 00H, 'p', 00H, 'k', 00H, 'g'
	DB	00H, '_', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, '\', 00H, 'x', 00H, '8'
	DB	00H, '6', 00H, '-', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 's', 00H, '\', 00H, 'x', 00H, '8', 00H, '6'
	DB	00H, '-', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 's', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'b', 00H, 'o', 00H
	DB	'o', 00H, 's', 00H, 't', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'e', 00H, 'x', 00H, '\', 00H, 'v', 00H, '5', 00H, '\', 00H
	DB	'w', 00H, '3', 00H, '2', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'e', 00H, 'x', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '.', 00H, 'h', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG247630 DB	'0', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+2
$SG257021 DB	'invalid argument', 00H
	ORG $+3
$SG257022 DB	'%s', 00H
	ORG $+1
$SG257023 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30133\include\xmemory', 00H
$SG257024 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG257025 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG257026 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG253180 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30133\include\xlocale', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	_wmemcpy
PUBLIC	?is_constant_evaluated@std@@YA_NXZ		; std::is_constant_evaluated
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QAEXQAHI@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z ; std::vector<int,std::allocator<int> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z ; std::vector<int,std::allocator<int> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@ABEABV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z ; std::vector<int,std::allocator<int> >::`scalar deleting destructor'
PUBLIC	??0?$initializer_list@H@std@@QAE@PBH0@Z		; std::initializer_list<int>::initializer_list<int>
PUBLIC	?begin@?$initializer_list@H@std@@QBEPBHXZ	; std::initializer_list<int>::begin
PUBLIC	?end@?$initializer_list@H@std@@QBEPBHXZ		; std::initializer_list<int>::end
PUBLIC	??0?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >
PUBLIC	?deallocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEXQAV?$vector@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::vector<int,std::allocator<int> > >::deallocate
PUBLIC	?allocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::vector<int,std::allocator<int> > >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size
PUBLIC	??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
PUBLIC	??1?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
PUBLIC	?max_size@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size
PUBLIC	?_Destroy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPAV?$vector@HV?$allocator@H@std@@@2@0@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy
PUBLIC	?_Buy_raw@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength
PUBLIC	?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
PUBLIC	?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@ABEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first
PUBLIC	?__autoclassinit2@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAEXI@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::__autoclassinit2
PUBLIC	??0?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@PBV?$vector@HV?$allocator@H@std@@@1@0@Z ; std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >
PUBLIC	?begin@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ ; std::initializer_list<std::vector<int,std::allocator<int> > >::begin
PUBLIC	?end@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ ; std::initializer_list<std::vector<int,std::allocator<int> > >::end
PUBLIC	??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXQAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>
PUBLIC	??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z ; std::forward<std::allocator<int> const &>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$construct_at@U_Container_proxy@std@@PAU_Container_base12@2@X@std@@YAPAU_Container_proxy@0@QAU10@$$QAPAU_Container_base12@0@@Z ; std::construct_at<std::_Container_proxy,std::_Container_base12 *,void>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$distance@PBH@std@@YAHPBH0@Z			; std::distance<int const *>
PUBLIC	??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
PUBLIC	??$_Ucopy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPBH0PAH@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int const *>
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<int const *,std::allocator<int> >
PUBLIC	??$_Get_unwrapped@ABQBH@std@@YA?A_TABQBH@Z	; std::_Get_unwrapped<int const * const &>
PUBLIC	??$to_address@$$CBH@std@@YAPBHQBH@Z		; std::to_address<int const >
PUBLIC	??$to_address@H@std@@YAPAHQAH@Z			; std::to_address<int>
PUBLIC	??$_Unfancy@H@std@@YAPAHPAH@Z			; std::_Unfancy<int>
PUBLIC	??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z	; std::_Copy_memmove<int const *,int *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@PAHAAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEPAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
PUBLIC	?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXI@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::__autoclassinit2
PUBLIC	??$_Emplace_back@ABH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXABH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int const &>
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
PUBLIC	??$construct@HABH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHABH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>
PUBLIC	??$construct_at@HABHX@std@@YAPAHQAHABH@Z	; std::construct_at<int,int const &,void>
PUBLIC	??$_Voidify_iter@PAH@std@@YAPAXPAH@Z		; std::_Voidify_iter<int *>
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>
PUBLIC	??$?0V?$vector@HV?$allocator@H@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<int,std::allocator<int> > >
PUBLIC	??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>
PUBLIC	??$forward@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>
PUBLIC	??$distance@PBV?$vector@HV?$allocator@H@std@@@std@@@std@@YAHPBV?$vector@HV?$allocator@H@std@@@0@0@Z ; std::distance<std::vector<int,std::allocator<int> > const *>
PUBLIC	??1?$_Tidy_guard@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >
PUBLIC	??$_Ucopy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEPAV?$vector@HV?$allocator@H@std@@@1@PBV21@0PAV21@@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>
PUBLIC	??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >
PUBLIC	??$_Get_unwrapped@ABQBV?$vector@HV?$allocator@H@std@@@std@@@std@@YA?A_TABQBV?$vector@HV?$allocator@H@std@@@0@@Z ; std::_Get_unwrapped<std::vector<int,std::allocator<int> > const * const &>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@PAV?$vector@HV?$allocator@H@std@@@1@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release
PUBLIC	?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXI@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::__autoclassinit2
PUBLIC	??$_Emplace_back@ABV?$vector@HV?$allocator@H@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXABV?$vector@HV?$allocator@H@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>
PUBLIC	??$_Unfancy@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@PAV10@@Z ; std::_Unfancy<std::vector<int,std::allocator<int> > >
PUBLIC	??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z ; std::forward<std::vector<int,std::allocator<int> > const &>
PUBLIC	??$construct@V?$vector@HV?$allocator@H@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>
PUBLIC	??$construct_at@V?$vector@HV?$allocator@H@std@@@std@@ABV12@X@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QAV10@ABV10@@Z ; std::construct_at<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &,void>
PUBLIC	??$_Voidify_iter@PAV?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAXPAV?$vector@HV?$allocator@H@std@@@0@@Z ; std::_Voidify_iter<std::vector<int,std::allocator<int> > *>
PUBLIC	??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >
PUBLIC	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
PUBLIC	??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z ; std::forward<std::allocator<int> >
PUBLIC	??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<int *,std::allocator<int> >
PUBLIC	??$_Get_unwrapped@ABQAH@std@@YA?A_TABQAH@Z	; std::_Get_unwrapped<int * const &>
PUBLIC	??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??$_Emplace_back@AAH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXAAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int &>
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
PUBLIC	??$construct@HAAH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHAAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int &>
PUBLIC	??$construct_at@HAAHX@std@@YAPAHQAHAAH@Z	; std::construct_at<int,int &,void>
PUBLIC	??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
PUBLIC	??$destroy@V?$vector@HV?$allocator@H@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >
PUBLIC	??_GBlock@@QAEPAXI@Z				; Block::`scalar deleting destructor'
PUBLIC	??0Terrain@@QAE@PAVRessourcePack@@@Z		; Terrain::Terrain
PUBLIC	?loadTerrain@Terrain@@QAEXH@Z			; Terrain::loadTerrain
PUBLIC	??1Terrain@@QAE@XZ				; Terrain::~Terrain
PUBLIC	?_Unchecked_begin@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_end
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YAII@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_To_address@PBH@std@@YA?A_PABQBH@Z		; std::_To_address<int const *>
PUBLIC	??$_To_address@PAH@std@@YA?A_PABQAH@Z		; std::_To_address<int *>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$destroy_at@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAXQAV?$vector@HV?$allocator@H@std@@@0@@Z ; std::destroy_at<std::vector<int,std::allocator<int> > >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?level1@@3V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@A ; level1
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	??1Block@@QAE@XZ:PROC				; Block::~Block
EXTRN	??0TerrainConstructor@@QAE@XZ:PROC		; TerrainConstructor::TerrainConstructor
EXTRN	?ConstructTerrainFromLevelFile@TerrainConstructor@@QAEPAV?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@HAAVRessourcePack@@@Z:PROC ; TerrainConstructor::ConstructTerrainFromLevelFile
EXTRN	??1TerrainConstructor@@QAE@XZ:PROC		; TerrainConstructor::~TerrainConstructor
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?level1@@3V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@A
_BSS	SEGMENT
?level1@@3V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@A DB 010H DUP (?) ; level1
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?level1$initializer$@@3P6AXXZA DD FLAT:??__Elevel1@@YAXXZ ; level1$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0a4H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__Elevel1@@YAXXZ DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$??__Elevel1@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??__Elevel1@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??__Elevel1@@YAXXZ$14
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	020H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	012bH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	020H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0ebH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	020H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	035H
	DB	0dfH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z$0
__ehfuncinfo$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	020H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	012bH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	020H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	035H
	DB	0dfH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z$0
__ehfuncinfo$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	027H
	DB	08bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	020H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02dH
	DW	0ffH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z$0
__ehfuncinfo$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	027H
	DB	08bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
	DB	028H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02dH
	DW	0153H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	020H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02dH
	DW	0ffH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01eH
	DW	0160H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	072H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 693  :     static _CONSTEXPR20_DYNALLOC void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 694  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 695  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 696  :         if (_STD is_constant_evaluated()) {

  0000d	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  00012	0f b6 c0	 movzx	 eax, al
  00015	85 c0		 test	 eax, eax
  00017	74 12		 je	 SHORT $LN2@deallocate

; 697  :             _Al.deallocate(_Ptr, _Count);

  00019	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00020	52		 push	 edx
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00024	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXQAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 698  :         } else

  00029	eb 13		 jmp	 SHORT $LN1@deallocate
$LN2@deallocate:

; 699  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 700  :         {
; 701  :             (void) _Al;
; 702  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0002b	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0002e	c1 e0 03	 shl	 eax, 3
  00031	50		 push	 eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003b	83 c4 08	 add	 esp, 8
$LN1@deallocate:

; 703  :         }
; 704  :     }

  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00026	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00029	83 c0 27	 add	 eax, 39			; 00000027H
  0002c	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 137  :     if (_Block_size <= _Bytes) {

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __Block_size$[ebp]
  00032	3b 4d 08	 cmp	 ecx, DWORD PTR __Bytes$[ebp]
  00035	77 05		 ja	 SHORT $LN8@Allocate_m

; 138  :         _Throw_bad_array_new_length(); // add overflow

  00037	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0003c	8b 55 fc	 mov	 edx, DWORD PTR __Block_size$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00045	83 c4 04	 add	 esp, 4
  00048	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004b	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0004f	74 02		 je	 SHORT $LN7@Allocate_m
  00051	eb 5c		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00053	8b f4		 mov	 esi, esp
  00055	68 00 00 00 00	 push	 OFFSET $SG257021
  0005a	68 00 00 00 00	 push	 OFFSET $SG257022
  0005f	6a 00		 push	 0
  00061	68 8e 00 00 00	 push	 142			; 0000008eH
  00066	68 00 00 00 00	 push	 OFFSET $SG257023
  0006b	6a 02		 push	 2
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 01		 jne	 SHORT $LN12@Allocate_m
  00082	cc		 int	 3
$LN12@Allocate_m:
  00083	8b f4		 mov	 esi, esp
  00085	6a 00		 push	 0
  00087	68 8e 00 00 00	 push	 142			; 0000008eH
  0008c	68 00 00 00 00	 push	 OFFSET $SG257024
  00091	68 00 00 00 00	 push	 OFFSET $SG257025
  00096	68 00 00 00 00	 push	 OFFSET $SG257026
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	33 c9		 xor	 ecx, ecx
  000ad	75 a4		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  000af	33 d2		 xor	 edx, edx
  000b1	75 98		 jne	 SHORT $LN4@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000b3	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000b6	83 c0 27	 add	 eax, 39			; 00000027H
  000b9	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000bc	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000bf	b9 04 00 00 00	 mov	 ecx, 4
  000c4	6b d1 ff	 imul	 edx, ecx, -1
  000c7	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ca	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  000cd	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000d0	ba 04 00 00 00	 mov	 edx, 4
  000d5	6b c2 fe	 imul	 eax, edx, -2
  000d8	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000db	c7 04 01 fa fa
	fa fa		 mov	 DWORD PTR [ecx+eax], -84215046 ; fafafafaH

; 148  : #endif // _DEBUG
; 149  :     return _Ptr;

  000e2	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 150  : }

  000e5	5e		 pop	 esi
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy_at@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAXQAV?$vector@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__Location$ = 8						; size = 4
??$destroy_at@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAXQAV?$vector@HV?$allocator@H@std@@@0@@Z PROC ; std::destroy_at<std::vector<int,std::allocator<int> > >, COMDAT

; 318  : _CONSTEXPR20_DYNALLOC void destroy_at(_Ty* const _Location) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 319  : #if _HAS_CXX20
; 320  :     if constexpr (is_array_v<_Ty>) {
; 321  :         _Destroy_range(_STD begin(*_Location), _STD end(*_Location));
; 322  :     } else
; 323  : #endif // _HAS_CXX20
; 324  :     {
; 325  :         _Location->~_Ty();

  0000d	6a 00		 push	 0
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Location$[ebp]
  00012	e8 00 00 00 00	 call	 ??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z

; 326  :     }
; 327  : }

  00017	3b ec		 cmp	 ebp, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$destroy_at@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAXQAV?$vector@HV?$allocator@H@std@@@0@@Z ENDP ; std::destroy_at<std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 985  : _CONSTEXPR20_DYNALLOC void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00027	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 986  :     // deallocate a plain pointer using an allocator
; 987  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 988  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 989  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  0002c	6a 01		 push	 1
  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 990  :     } else {
; 991  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 992  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 993  :     }
; 994  : }

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PAH@std@@YA?A_PABQAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAH@std@@YA?A_PABQAH@Z PROC		; std::_To_address<int *>, COMDAT

; 4070 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4071 :     _STL_INTERNAL_STATIC_ASSERT(contiguous_iterator<_Iter>);
; 4072 :     return _STD to_address(_Val);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$to_address@H@std@@YAPAHQAH@Z ; std::to_address<int>
  00018	83 c4 04	 add	 esp, 4

; 4073 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_To_address@PAH@std@@YA?A_PABQAH@Z ENDP		; std::_To_address<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_To_address@PBH@std@@YA?A_PABQBH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PBH@std@@YA?A_PABQBH@Z PROC		; std::_To_address<int const *>, COMDAT

; 4070 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4071 :     _STL_INTERNAL_STATIC_ASSERT(contiguous_iterator<_Iter>);
; 4072 :     return _STD to_address(_Val);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$to_address@$$CBH@std@@YAPBHQBH@Z ; std::to_address<int const >
  00018	83 c4 04	 add	 esp, 4

; 4073 : }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_To_address@PBH@std@@YA?A_PABQBH@Z ENDP		; std::_To_address<int const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 251  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00027	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {

  0002c	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  00031	0f b6 c0	 movzx	 eax, al
  00034	85 c0		 test	 eax, eax
  00036	74 0e		 je	 SHORT $LN2@Deallocate

; 255  :         ::operator delete(_Ptr);

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00041	83 c4 04	 add	 esp, 4

; 256  :     } else

  00044	eb 29		 jmp	 SHORT $LN5@Deallocate
$LN2@Deallocate:

; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00046	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0004d	72 10		 jb	 SHORT $LN4@Deallocate

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0004f	8d 55 0c	 lea	 edx, DWORD PTR __Bytes$[ebp]
  00052	52		 push	 edx
  00053	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  0005c	83 c4 08	 add	 esp, 8
$LN4@Deallocate:

; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00062	51		 push	 ecx
  00063	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006c	83 c4 08	 add	 esp, 8
$LN5@Deallocate:

; 265  :     }
; 266  : }

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
  00088	cc		 int	 3
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001e	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00022	c7 45 f8 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$1[ebp], 1073741823 ; 3fffffffH

; 64   :         if (_Count > _Max_possible) {

  00029	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00030	76 05		 jbe	 SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00032	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00037	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	c1 e0 02	 shl	 eax, 2
$LN3@Get_size_o:

; 70   : }

  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BA@@std@@YAII@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001e	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00022	c7 45 f8 ff ff
	ff 0f		 mov	 DWORD PTR __Max_possible$1[ebp], 268435455 ; 0fffffffH

; 64   :         if (_Count > _Max_possible) {

  00029	81 7d 08 ff ff
	ff 0f		 cmp	 DWORD PTR __Count$[ebp], 268435455 ; 0fffffffH
  00030	76 05		 jbe	 SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00032	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00037	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	c1 e0 04	 shl	 eax, 4
$LN3@Get_size_o:

; 70   : }

  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 614  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __1347750E_utility
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 615  :     // assign _New_val to _Val, return previous _Val
; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00015	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00020	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	89 0a		 mov	 DWORD PTR [edx], ecx

; 618  :     return _Old_val;

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 619  : }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 230  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())

  0000d	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  00012	0f b6 c0	 movzx	 eax, al
  00015	85 c0		 test	 eax, eax
  00017	75 17		 jne	 SHORT $LN2@Allocate

; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00019	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00020	72 0e		 jb	 SHORT $LN2@Allocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0002b	83 c4 04	 add	 esp, 4
  0002e	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00030	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00034	74 0e		 je	 SHORT $LN4@Allocate

; 244  :         return _Traits::_Allocate(_Bytes);

  00036	8b 55 08	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0003f	83 c4 04	 add	 esp, 4
  00042	eb 02		 jmp	 SHORT $LN1@Allocate
$LN4@Allocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00044	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 248  : }

  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001e	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00022	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 64   :         if (_Count > _Max_possible) {

  00029	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00030	76 05		 jbe	 SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00032	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00037	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 70   : }

  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unchecked_end@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_end@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ PROC ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1534 :     _NODISCARD _CONSTEXPR20_CONTAINER pointer _Unchecked_end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1535 :         return _Mypair._Myval2._Mylast;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1536 :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?_Unchecked_end@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ ENDP ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_begin@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ PROC ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1526 :     _NODISCARD _CONSTEXPR20_CONTAINER pointer _Unchecked_begin() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1527 :         return _Mypair._Myval2._Myfirst;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1528 :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?_Unchecked_begin@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ ENDP ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Terrain.cpp
_TEXT	SEGMENT
tv77 = -28						; size = 4
$T1 = -24						; size = 4
_elem$2 = -20						; size = 4
_<end>$L0$3 = -16					; size = 4
_<begin>$L0$4 = -12					; size = 4
_<range>$L0$5 = -8					; size = 4
_this$ = -4						; size = 4
??1Terrain@@QAE@XZ PROC					; Terrain::~Terrain
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __1792DCCD_Terrain@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 16   : 	for (auto elem : *terrain) {

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d f8	 mov	 DWORD PTR _<range>$L0$5[ebp], ecx
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _<range>$L0$5[ebp]
  00038	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_begin
  0003d	89 45 f4	 mov	 DWORD PTR _<begin>$L0$4[ebp], eax
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _<range>$L0$5[ebp]
  00043	e8 00 00 00 00	 call	 ?_Unchecked_end@?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@QAEPAPAVBlock@@XZ ; std::vector<Block *,std::allocator<Block *> >::_Unchecked_end
  00048	89 45 f0	 mov	 DWORD PTR _<end>$L0$3[ebp], eax
  0004b	eb 09		 jmp	 SHORT $LN4@Terrain
$LN2@Terrain:
  0004d	8b 55 f4	 mov	 edx, DWORD PTR _<begin>$L0$4[ebp]
  00050	83 c2 04	 add	 edx, 4
  00053	89 55 f4	 mov	 DWORD PTR _<begin>$L0$4[ebp], edx
$LN4@Terrain:
  00056	8b 45 f4	 mov	 eax, DWORD PTR _<begin>$L0$4[ebp]
  00059	3b 45 f0	 cmp	 eax, DWORD PTR _<end>$L0$3[ebp]
  0005c	74 2c		 je	 SHORT $LN1@Terrain
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _<begin>$L0$4[ebp]
  00061	8b 11		 mov	 edx, DWORD PTR [ecx]
  00063	89 55 ec	 mov	 DWORD PTR _elem$2[ebp], edx

; 17   : 			delete(elem);

  00066	8b 45 ec	 mov	 eax, DWORD PTR _elem$2[ebp]
  00069	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
  0006c	83 7d e8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00070	74 0f		 je	 SHORT $LN6@Terrain
  00072	6a 01		 push	 1
  00074	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  00077	e8 00 00 00 00	 call	 ??_GBlock@@QAEPAXI@Z
  0007c	89 45 e4	 mov	 DWORD PTR tv77[ebp], eax
  0007f	eb 07		 jmp	 SHORT $LN7@Terrain
$LN6@Terrain:
  00081	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN7@Terrain:

; 18   : 		
; 19   : 	}

  00088	eb c3		 jmp	 SHORT $LN2@Terrain
$LN1@Terrain:

; 20   : }

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	83 c1 08	 add	 ecx, 8
  00090	e8 00 00 00 00	 call	 ??1TerrainConstructor@@QAE@XZ ; TerrainConstructor::~TerrainConstructor
  00095	83 c4 1c	 add	 esp, 28			; 0000001cH
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
??1Terrain@@QAE@XZ ENDP					; Terrain::~Terrain
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Terrain.cpp
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?loadTerrain@Terrain@@QAEXH@Z PROC			; Terrain::loadTerrain
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __1792DCCD_Terrain@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 11   : 	terrain = TC.ConstructTerrainFromLevelFile(level, *RP);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c0 08	 add	 eax, 8
  00027	89 45 f8	 mov	 DWORD PTR tv72[ebp], eax
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  00034	50		 push	 eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR tv72[ebp]
  00038	e8 00 00 00 00	 call	 ?ConstructTerrainFromLevelFile@TerrainConstructor@@QAEPAV?$vector@PAVBlock@@V?$allocator@PAVBlock@@@std@@@std@@HAAVRessourcePack@@@Z ; TerrainConstructor::ConstructTerrainFromLevelFile
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	89 01		 mov	 DWORD PTR [ecx], eax

; 12   : }

  00042	83 c4 08	 add	 esp, 8
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?loadTerrain@Terrain@@QAEXH@Z ENDP			; Terrain::loadTerrain
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Terrain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rp$ = 8						; size = 4
??0Terrain@@QAE@PAVRessourcePack@@@Z PROC		; Terrain::Terrain
; _this$ = ecx

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __1792DCCD_Terrain@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	e8 00 00 00 00	 call	 ??0TerrainConstructor@@QAE@XZ ; TerrainConstructor::TerrainConstructor

; 5    : 	RP = rp;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _rp$[ebp]
  00029	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 6    : 	
; 7    : }

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??0Terrain@@QAE@PAVRessourcePack@@@Z ENDP		; Terrain::Terrain
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBlock@@QAEPAXI@Z PROC				; Block::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Block@@QAE@XZ	; Block::~Block
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GBlock@@QAEPAXI@Z ENDP				; Block::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Flevel1@@YAXXZ
text$yd	SEGMENT
??__Flevel1@@YAXXZ PROC					; `dynamic atexit destructor for 'level1'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?level1@@3V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@A ; level1
  00008	e8 00 00 00 00	 call	 ??1?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__Flevel1@@YAXXZ ENDP					; `dynamic atexit destructor for 'level1''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Levels.h
;	COMDAT ??__Elevel1@@YAXXZ
text$di	SEGMENT
tv568 = -1220						; size = 4
tv553 = -1216						; size = 4
tv474 = -1212						; size = 4
tv459 = -1208						; size = 4
tv412 = -1204						; size = 4
tv397 = -1200						; size = 4
tv350 = -1196						; size = 4
tv335 = -1192						; size = 4
tv320 = -1188						; size = 4
tv241 = -1184						; size = 4
tv226 = -1180						; size = 4
tv179 = -1176						; size = 4
tv164 = -1172						; size = 4
tv84 = -1168						; size = 4
tv612 = -1164						; size = 4
$T2 = -1160						; size = 8
$T3 = -1152						; size = 8
$T4 = -1144						; size = 8
$T5 = -1132						; size = 8
$T6 = -1121						; size = 1
$T7 = -1120						; size = 8
$T8 = -1108						; size = 8
$T9 = -1097						; size = 1
$T10 = -1096						; size = 8
$T11 = -1084						; size = 8
$T12 = -1073						; size = 1
$T13 = -1072						; size = 8
$T14 = -1060						; size = 8
$T15 = -1049						; size = 1
$T16 = -1048						; size = 8
$T17 = -1036						; size = 8
$T18 = -1025						; size = 1
$T19 = -1024						; size = 8
$T20 = -1012						; size = 8
$T21 = -1001						; size = 1
$T22 = -1000						; size = 8
$T23 = -988						; size = 8
$T24 = -977						; size = 1
$T25 = -976						; size = 8
$T26 = -964						; size = 8
$T27 = -953						; size = 1
$T28 = -952						; size = 8
$T29 = -940						; size = 8
$T30 = -929						; size = 1
$T31 = -928						; size = 8
$T32 = -916						; size = 8
$T33 = -905						; size = 1
$T34 = -904						; size = 8
$T35 = -892						; size = 8
$T36 = -881						; size = 1
$T37 = -880						; size = 8
$T38 = -868						; size = 8
$T39 = -857						; size = 1
$T40 = -856						; size = 8
$T41 = -844						; size = 8
$T42 = -833						; size = 1
$T43 = -832						; size = 8
$T44 = -820						; size = 8
$T45 = -810						; size = 1
$T46 = -809						; size = 1
$T47 = -808						; size = 36
$T48 = -768						; size = 36
$T49 = -728						; size = 36
$T50 = -688						; size = 36
$T51 = -648						; size = 36
$T52 = -608						; size = 36
$T53 = -568						; size = 36
$T54 = -528						; size = 36
$T55 = -488						; size = 36
$T56 = -448						; size = 36
$T57 = -408						; size = 36
$T58 = -368						; size = 36
$T59 = -328						; size = 36
$T60 = -288						; size = 36
$T61 = -248						; size = 224
__$EHRec$ = -12						; size = 12
??__Elevel1@@YAXXZ PROC					; `dynamic initializer for 'level1'', COMDAT

; 19   : };

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$??__Elevel1@@YAXXZ
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec b8 04 00
	00		 sub	 esp, 1208		; 000004b8H
  0002b	57		 push	 edi
  0002c	8d bd 38 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1224]
  00032	b9 2e 01 00 00	 mov	 ecx, 302		; 0000012eH
  00037	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0003c	f3 ab		 rep stosd
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00043	33 c5		 xor	 eax, ebp
  00045	50		 push	 eax
  00046	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00049	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0004f	b9 00 00 00 00	 mov	 ecx, OFFSET __5B368A28_Levels@h
  00054	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4    : inline std::vector<std::vector<int>> level1 = {

  00059	6a 10		 push	 16			; 00000010H
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?level1@@3V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@A ; level1
  00060	e8 00 00 00 00	 call	 ?__autoclassinit2@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAEXI@Z
  00065	8d 8d d7 fc ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  0006b	e8 00 00 00 00	 call	 ??0?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >
  00070	89 85 74 fb ff
	ff		 mov	 DWORD PTR tv612[ebp], eax
  00076	8d 8d d6 fc ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  0007c	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  00081	89 85 70 fb ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  00087	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp], 0
  00091	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+4], 0
  0009b	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+8], 0
  000a5	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+12], 0
  000af	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+16], 0
  000b9	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+20], 0
  000c3	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+24], 0
  000cd	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+28], 0
  000d7	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T60[ebp+32], 0
  000e1	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T60[ebp+36]
  000e7	50		 push	 eax
  000e8	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T60[ebp]
  000ee	51		 push	 ecx
  000ef	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T44[ebp]
  000f5	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  000fa	8b 10		 mov	 edx, DWORD PTR [eax]
  000fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ff	89 95 c0 fc ff
	ff		 mov	 DWORD PTR $T43[ebp], edx
  00105	89 85 c4 fc ff
	ff		 mov	 DWORD PTR $T43[ebp+4], eax
  0010b	8b 8d 70 fb ff
	ff		 mov	 ecx, DWORD PTR tv84[ebp]
  00111	51		 push	 ecx
  00112	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR $T43[ebp+4]
  00118	52		 push	 edx
  00119	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR $T43[ebp]
  0011f	50		 push	 eax
  00120	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp]
  00126	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  0012b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00132	8d 8d bf fc ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  00138	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  0013d	89 85 6c fb ff
	ff		 mov	 DWORD PTR tv164[ebp], eax
  00143	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp], 0
  0014d	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+4], 0
  00157	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+8], 0
  00161	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+12], 0
  0016b	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+16], 0
  00175	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+20], 0
  0017f	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+24], 0
  00189	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+28], 0
  00193	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T59[ebp+32], 0
  0019d	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T59[ebp+36]
  001a3	51		 push	 ecx
  001a4	8d 95 b8 fe ff
	ff		 lea	 edx, DWORD PTR $T59[ebp]
  001aa	52		 push	 edx
  001ab	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  001b1	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  001b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bb	89 8d a8 fc ff
	ff		 mov	 DWORD PTR $T40[ebp], ecx
  001c1	89 95 ac fc ff
	ff		 mov	 DWORD PTR $T40[ebp+4], edx
  001c7	8b 85 6c fb ff
	ff		 mov	 eax, DWORD PTR tv164[ebp]
  001cd	50		 push	 eax
  001ce	8b 8d ac fc ff
	ff		 mov	 ecx, DWORD PTR $T40[ebp+4]
  001d4	51		 push	 ecx
  001d5	8b 95 a8 fc ff
	ff		 mov	 edx, DWORD PTR $T40[ebp]
  001db	52		 push	 edx
  001dc	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+16]
  001e2	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  001e7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001eb	8d 8d a7 fc ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  001f1	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  001f6	89 85 68 fb ff
	ff		 mov	 DWORD PTR tv179[ebp], eax
  001fc	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp], 0
  00206	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+4], 0
  00210	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+8], 0
  0021a	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+12], 0
  00224	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+16], 0
  0022e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+20], 0
  00238	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+24], 0
  00242	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+28], 0
  0024c	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T58[ebp+32], 0
  00256	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR $T58[ebp+36]
  0025c	50		 push	 eax
  0025d	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T58[ebp]
  00263	51		 push	 ecx
  00264	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  0026a	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  0026f	8b 10		 mov	 edx, DWORD PTR [eax]
  00271	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00274	89 95 90 fc ff
	ff		 mov	 DWORD PTR $T37[ebp], edx
  0027a	89 85 94 fc ff
	ff		 mov	 DWORD PTR $T37[ebp+4], eax
  00280	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR tv179[ebp]
  00286	51		 push	 ecx
  00287	8b 95 94 fc ff
	ff		 mov	 edx, DWORD PTR $T37[ebp+4]
  0028d	52		 push	 edx
  0028e	8b 85 90 fc ff
	ff		 mov	 eax, DWORD PTR $T37[ebp]
  00294	50		 push	 eax
  00295	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+32]
  0029b	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  002a0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  002a4	8d 8d 8f fc ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  002aa	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  002af	89 85 64 fb ff
	ff		 mov	 DWORD PTR tv226[ebp], eax
  002b5	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp], 0
  002bf	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+4], 0
  002c9	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+8], 0
  002d3	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+12], 0
  002dd	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+16], 0
  002e7	c7 85 7c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+20], 0
  002f1	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+24], 0
  002fb	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+28], 0
  00305	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T57[ebp+32], 0
  0030f	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T57[ebp+36]
  00315	51		 push	 ecx
  00316	8d 95 68 fe ff
	ff		 lea	 edx, DWORD PTR $T57[ebp]
  0031c	52		 push	 edx
  0031d	8d 8d 84 fc ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  00323	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  00328	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0032d	89 8d 78 fc ff
	ff		 mov	 DWORD PTR $T34[ebp], ecx
  00333	89 95 7c fc ff
	ff		 mov	 DWORD PTR $T34[ebp+4], edx
  00339	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR tv226[ebp]
  0033f	50		 push	 eax
  00340	8b 8d 7c fc ff
	ff		 mov	 ecx, DWORD PTR $T34[ebp+4]
  00346	51		 push	 ecx
  00347	8b 95 78 fc ff
	ff		 mov	 edx, DWORD PTR $T34[ebp]
  0034d	52		 push	 edx
  0034e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+48]
  00354	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00359	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0035d	8d 8d 77 fc ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  00363	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  00368	89 85 60 fb ff
	ff		 mov	 DWORD PTR tv241[ebp], eax
  0036e	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp], 0
  00378	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+4], 0
  00382	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+8], 0
  0038c	c7 85 4c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+12], 0
  00396	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+16], 0
  003a0	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+20], 0
  003aa	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+24], 0
  003b4	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+28], 0
  003be	c7 85 60 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T56[ebp+32], 0
  003c8	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR $T56[ebp+36]
  003ce	50		 push	 eax
  003cf	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR $T56[ebp]
  003d5	51		 push	 ecx
  003d6	8d 8d 6c fc ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  003dc	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  003e1	8b 10		 mov	 edx, DWORD PTR [eax]
  003e3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003e6	89 95 60 fc ff
	ff		 mov	 DWORD PTR $T31[ebp], edx
  003ec	89 85 64 fc ff
	ff		 mov	 DWORD PTR $T31[ebp+4], eax
  003f2	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR tv241[ebp]
  003f8	51		 push	 ecx
  003f9	8b 95 64 fc ff
	ff		 mov	 edx, DWORD PTR $T31[ebp+4]
  003ff	52		 push	 edx
  00400	8b 85 60 fc ff
	ff		 mov	 eax, DWORD PTR $T31[ebp]
  00406	50		 push	 eax
  00407	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+64]
  0040d	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00412	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00416	8d 8d 5f fc ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  0041c	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  00421	89 85 5c fb ff
	ff		 mov	 DWORD PTR tv320[ebp], eax
  00427	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp], 0
  00431	c7 85 1c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+4], 0
  0043b	c7 85 20 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+8], 0
  00445	c7 85 24 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+12], 0
  0044f	c7 85 28 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+16], 0
  00459	c7 85 2c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+20], 0
  00463	c7 85 30 fe ff
	ff 03 00 00 00	 mov	 DWORD PTR $T55[ebp+24], 3
  0046d	c7 85 34 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+28], 0
  00477	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T55[ebp+32], 0
  00481	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR $T55[ebp+36]
  00487	51		 push	 ecx
  00488	8d 95 18 fe ff
	ff		 lea	 edx, DWORD PTR $T55[ebp]
  0048e	52		 push	 edx
  0048f	8d 8d 54 fc ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  00495	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  0049a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0049c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0049f	89 8d 48 fc ff
	ff		 mov	 DWORD PTR $T28[ebp], ecx
  004a5	89 95 4c fc ff
	ff		 mov	 DWORD PTR $T28[ebp+4], edx
  004ab	8b 85 5c fb ff
	ff		 mov	 eax, DWORD PTR tv320[ebp]
  004b1	50		 push	 eax
  004b2	8b 8d 4c fc ff
	ff		 mov	 ecx, DWORD PTR $T28[ebp+4]
  004b8	51		 push	 ecx
  004b9	8b 95 48 fc ff
	ff		 mov	 edx, DWORD PTR $T28[ebp]
  004bf	52		 push	 edx
  004c0	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+80]
  004c6	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  004cb	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  004cf	8d 8d 47 fc ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  004d5	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  004da	89 85 58 fb ff
	ff		 mov	 DWORD PTR tv335[ebp], eax
  004e0	c7 85 f0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp], 0
  004ea	c7 85 f4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+4], 0
  004f4	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+8], 0
  004fe	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+12], 0
  00508	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+16], 0
  00512	c7 85 04 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+20], 0
  0051c	c7 85 08 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR $T54[ebp+24], 5
  00526	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+28], 0
  00530	c7 85 10 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+32], 0
  0053a	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR $T54[ebp+36]
  00540	50		 push	 eax
  00541	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
  00547	51		 push	 ecx
  00548	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  0054e	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  00553	8b 10		 mov	 edx, DWORD PTR [eax]
  00555	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00558	89 95 30 fc ff
	ff		 mov	 DWORD PTR $T25[ebp], edx
  0055e	89 85 34 fc ff
	ff		 mov	 DWORD PTR $T25[ebp+4], eax
  00564	8b 8d 58 fb ff
	ff		 mov	 ecx, DWORD PTR tv335[ebp]
  0056a	51		 push	 ecx
  0056b	8b 95 34 fc ff
	ff		 mov	 edx, DWORD PTR $T25[ebp+4]
  00571	52		 push	 edx
  00572	8b 85 30 fc ff
	ff		 mov	 eax, DWORD PTR $T25[ebp]
  00578	50		 push	 eax
  00579	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+96]
  0057f	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00584	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00588	8d 8d 2f fc ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  0058e	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  00593	89 85 54 fb ff
	ff		 mov	 DWORD PTR tv350[ebp], eax
  00599	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp], 0
  005a3	c7 85 cc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+4], 0
  005ad	c7 85 d0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+8], 0
  005b7	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+12], 0
  005c1	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+16], 0
  005cb	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+20], 0
  005d5	c7 85 e0 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR $T53[ebp+24], 3
  005df	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+28], 0
  005e9	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T53[ebp+32], 0
  005f3	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T53[ebp+36]
  005f9	51		 push	 ecx
  005fa	8d 95 c8 fd ff
	ff		 lea	 edx, DWORD PTR $T53[ebp]
  00600	52		 push	 edx
  00601	8d 8d 24 fc ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  00607	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  0060c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0060e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00611	89 8d 18 fc ff
	ff		 mov	 DWORD PTR $T22[ebp], ecx
  00617	89 95 1c fc ff
	ff		 mov	 DWORD PTR $T22[ebp+4], edx
  0061d	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR tv350[ebp]
  00623	50		 push	 eax
  00624	8b 8d 1c fc ff
	ff		 mov	 ecx, DWORD PTR $T22[ebp+4]
  0062a	51		 push	 ecx
  0062b	8b 95 18 fc ff
	ff		 mov	 edx, DWORD PTR $T22[ebp]
  00631	52		 push	 edx
  00632	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+112]
  00638	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  0063d	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00641	8d 8d 17 fc ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  00647	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  0064c	89 85 50 fb ff
	ff		 mov	 DWORD PTR tv397[ebp], eax
  00652	c7 85 a0 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T52[ebp], 2
  0065c	c7 85 a4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T52[ebp+4], 0
  00666	c7 85 a8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T52[ebp+8], 0
  00670	c7 85 ac fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T52[ebp+12], 0
  0067a	c7 85 b0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T52[ebp+16], 0
  00684	c7 85 b4 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T52[ebp+20], 2
  0068e	c7 85 b8 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T52[ebp+24], 2
  00698	c7 85 bc fd ff
	ff 06 00 00 00	 mov	 DWORD PTR $T52[ebp+28], 6
  006a2	c7 85 c0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T52[ebp+32], 0
  006ac	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR $T52[ebp+36]
  006b2	50		 push	 eax
  006b3	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR $T52[ebp]
  006b9	51		 push	 ecx
  006ba	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  006c0	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  006c5	8b 10		 mov	 edx, DWORD PTR [eax]
  006c7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  006ca	89 95 00 fc ff
	ff		 mov	 DWORD PTR $T19[ebp], edx
  006d0	89 85 04 fc ff
	ff		 mov	 DWORD PTR $T19[ebp+4], eax
  006d6	8b 8d 50 fb ff
	ff		 mov	 ecx, DWORD PTR tv397[ebp]
  006dc	51		 push	 ecx
  006dd	8b 95 04 fc ff
	ff		 mov	 edx, DWORD PTR $T19[ebp+4]
  006e3	52		 push	 edx
  006e4	8b 85 00 fc ff
	ff		 mov	 eax, DWORD PTR $T19[ebp]
  006ea	50		 push	 eax
  006eb	8d 4d 88	 lea	 ecx, DWORD PTR $T61[ebp+128]
  006ee	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  006f3	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  006f7	8d 8d ff fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  006fd	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  00702	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv412[ebp], eax
  00708	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T51[ebp], 0
  00712	c7 85 7c fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T51[ebp+4], 2
  0071c	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T51[ebp+8], 0
  00726	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T51[ebp+12], 0
  00730	c7 85 88 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR $T51[ebp+16], -1
  0073a	c7 85 8c fd ff
	ff 03 00 00 00	 mov	 DWORD PTR $T51[ebp+20], 3
  00744	c7 85 90 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR $T51[ebp+24], 3
  0074e	c7 85 94 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T51[ebp+28], 2
  00758	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T51[ebp+32], 0
  00762	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T51[ebp+36]
  00768	51		 push	 ecx
  00769	8d 95 78 fd ff
	ff		 lea	 edx, DWORD PTR $T51[ebp]
  0076f	52		 push	 edx
  00770	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00776	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  0077b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0077d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00780	89 8d e8 fb ff
	ff		 mov	 DWORD PTR $T16[ebp], ecx
  00786	89 95 ec fb ff
	ff		 mov	 DWORD PTR $T16[ebp+4], edx
  0078c	8b 85 4c fb ff
	ff		 mov	 eax, DWORD PTR tv412[ebp]
  00792	50		 push	 eax
  00793	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR $T16[ebp+4]
  00799	51		 push	 ecx
  0079a	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR $T16[ebp]
  007a0	52		 push	 edx
  007a1	8d 4d 98	 lea	 ecx, DWORD PTR $T61[ebp+144]
  007a4	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  007a9	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  007ad	8d 8d e7 fb ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  007b3	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  007b8	89 85 48 fb ff
	ff		 mov	 DWORD PTR tv459[ebp], eax
  007be	c7 85 50 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T50[ebp], 0
  007c8	c7 85 54 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T50[ebp+4], 0
  007d2	c7 85 58 fd ff
	ff 05 00 00 00	 mov	 DWORD PTR $T50[ebp+8], 5
  007dc	c7 85 5c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T50[ebp+12], 0
  007e6	c7 85 60 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T50[ebp+16], 0
  007f0	c7 85 64 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T50[ebp+20], 0
  007fa	c7 85 68 fd ff
	ff 04 00 00 00	 mov	 DWORD PTR $T50[ebp+24], 4
  00804	c7 85 6c fd ff
	ff 03 00 00 00	 mov	 DWORD PTR $T50[ebp+28], 3
  0080e	c7 85 70 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T50[ebp+32], 0
  00818	8d 85 74 fd ff
	ff		 lea	 eax, DWORD PTR $T50[ebp+36]
  0081e	50		 push	 eax
  0081f	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T50[ebp]
  00825	51		 push	 ecx
  00826	8d 8d dc fb ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  0082c	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  00831	8b 10		 mov	 edx, DWORD PTR [eax]
  00833	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00836	89 95 d0 fb ff
	ff		 mov	 DWORD PTR $T13[ebp], edx
  0083c	89 85 d4 fb ff
	ff		 mov	 DWORD PTR $T13[ebp+4], eax
  00842	8b 8d 48 fb ff
	ff		 mov	 ecx, DWORD PTR tv459[ebp]
  00848	51		 push	 ecx
  00849	8b 95 d4 fb ff
	ff		 mov	 edx, DWORD PTR $T13[ebp+4]
  0084f	52		 push	 edx
  00850	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR $T13[ebp]
  00856	50		 push	 eax
  00857	8d 4d a8	 lea	 ecx, DWORD PTR $T61[ebp+160]
  0085a	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  0085f	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00863	8d 8d cf fb ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00869	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  0086e	89 85 44 fb ff
	ff		 mov	 DWORD PTR tv474[ebp], eax
  00874	c7 85 28 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49[ebp], 0
  0087e	c7 85 2c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49[ebp+4], 0
  00888	c7 85 30 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR $T49[ebp+8], 3
  00892	c7 85 34 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T49[ebp+12], 2
  0089c	c7 85 38 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49[ebp+16], 0
  008a6	c7 85 3c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49[ebp+20], 0
  008b0	c7 85 40 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49[ebp+24], 0
  008ba	c7 85 44 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T49[ebp+28], 2
  008c4	c7 85 48 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T49[ebp+32], 0
  008ce	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR $T49[ebp+36]
  008d4	51		 push	 ecx
  008d5	8d 95 28 fd ff
	ff		 lea	 edx, DWORD PTR $T49[ebp]
  008db	52		 push	 edx
  008dc	8d 8d c4 fb ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  008e2	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  008e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  008e9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  008ec	89 8d b8 fb ff
	ff		 mov	 DWORD PTR $T10[ebp], ecx
  008f2	89 95 bc fb ff
	ff		 mov	 DWORD PTR $T10[ebp+4], edx
  008f8	8b 85 44 fb ff
	ff		 mov	 eax, DWORD PTR tv474[ebp]
  008fe	50		 push	 eax
  008ff	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+4]
  00905	51		 push	 ecx
  00906	8b 95 b8 fb ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
  0090c	52		 push	 edx
  0090d	8d 4d b8	 lea	 ecx, DWORD PTR $T61[ebp+176]
  00910	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00915	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00919	8d 8d b7 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0091f	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  00924	89 85 40 fb ff
	ff		 mov	 DWORD PTR tv553[ebp], eax
  0092a	c7 85 00 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T48[ebp], 0
  00934	c7 85 04 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T48[ebp+4], 0
  0093e	c7 85 08 fd ff
	ff 02 00 00 00	 mov	 DWORD PTR $T48[ebp+8], 2
  00948	c7 85 0c fd ff
	ff 04 00 00 00	 mov	 DWORD PTR $T48[ebp+12], 4
  00952	c7 85 10 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR $T48[ebp+16], 3
  0095c	c7 85 14 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T48[ebp+20], 0
  00966	c7 85 18 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T48[ebp+24], 0
  00970	c7 85 1c fd ff
	ff 04 00 00 00	 mov	 DWORD PTR $T48[ebp+28], 4
  0097a	c7 85 20 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T48[ebp+32], 0
  00984	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR $T48[ebp+36]
  0098a	50		 push	 eax
  0098b	8d 8d 00 fd ff
	ff		 lea	 ecx, DWORD PTR $T48[ebp]
  00991	51		 push	 ecx
  00992	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00998	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  0099d	8b 10		 mov	 edx, DWORD PTR [eax]
  0099f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  009a2	89 95 a0 fb ff
	ff		 mov	 DWORD PTR $T7[ebp], edx
  009a8	89 85 a4 fb ff
	ff		 mov	 DWORD PTR $T7[ebp+4], eax
  009ae	8b 8d 40 fb ff
	ff		 mov	 ecx, DWORD PTR tv553[ebp]
  009b4	51		 push	 ecx
  009b5	8b 95 a4 fb ff
	ff		 mov	 edx, DWORD PTR $T7[ebp+4]
  009bb	52		 push	 edx
  009bc	8b 85 a0 fb ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  009c2	50		 push	 eax
  009c3	8d 4d c8	 lea	 ecx, DWORD PTR $T61[ebp+192]
  009c6	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  009cb	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  009cf	8d 8d 9f fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  009d5	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  009da	89 85 3c fb ff
	ff		 mov	 DWORD PTR tv568[ebp], eax
  009e0	c7 85 d8 fc ff
	ff 02 00 00 00	 mov	 DWORD PTR $T47[ebp], 2
  009ea	c7 85 dc fc ff
	ff 02 00 00 00	 mov	 DWORD PTR $T47[ebp+4], 2
  009f4	c7 85 e0 fc ff
	ff 03 00 00 00	 mov	 DWORD PTR $T47[ebp+8], 3
  009fe	c7 85 e4 fc ff
	ff 03 00 00 00	 mov	 DWORD PTR $T47[ebp+12], 3
  00a08	c7 85 e8 fc ff
	ff 02 00 00 00	 mov	 DWORD PTR $T47[ebp+16], 2
  00a12	c7 85 ec fc ff
	ff 03 00 00 00	 mov	 DWORD PTR $T47[ebp+20], 3
  00a1c	c7 85 f0 fc ff
	ff 03 00 00 00	 mov	 DWORD PTR $T47[ebp+24], 3
  00a26	c7 85 f4 fc ff
	ff 02 00 00 00	 mov	 DWORD PTR $T47[ebp+28], 2
  00a30	c7 85 f8 fc ff
	ff 04 00 00 00	 mov	 DWORD PTR $T47[ebp+32], 4
  00a3a	8d 8d fc fc ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp+36]
  00a40	51		 push	 ecx
  00a41	8d 95 d8 fc ff
	ff		 lea	 edx, DWORD PTR $T47[ebp]
  00a47	52		 push	 edx
  00a48	8d 8d 94 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00a4e	e8 00 00 00 00	 call	 ??0?$initializer_list@H@std@@QAE@PBH0@Z ; std::initializer_list<int>::initializer_list<int>
  00a53	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a55	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00a58	89 8d 88 fb ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00a5e	89 95 8c fb ff
	ff		 mov	 DWORD PTR $T4[ebp+4], edx
  00a64	8b 85 3c fb ff
	ff		 mov	 eax, DWORD PTR tv568[ebp]
  00a6a	50		 push	 eax
  00a6b	8b 8d 8c fb ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp+4]
  00a71	51		 push	 ecx
  00a72	8b 95 88 fb ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
  00a78	52		 push	 edx
  00a79	8d 4d d8	 lea	 ecx, DWORD PTR $T61[ebp+208]
  00a7c	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  00a81	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00a88	8d 45 e8	 lea	 eax, DWORD PTR $T61[ebp+224]
  00a8b	50		 push	 eax
  00a8c	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp]
  00a92	51		 push	 ecx
  00a93	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00a99	e8 00 00 00 00	 call	 ??0?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@PBV?$vector@HV?$allocator@H@std@@@1@0@Z ; std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >
  00a9e	8b 10		 mov	 edx, DWORD PTR [eax]
  00aa0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00aa3	89 95 78 fb ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00aa9	89 85 7c fb ff
	ff		 mov	 DWORD PTR $T2[ebp+4], eax
  00aaf	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR tv612[ebp]
  00ab5	51		 push	 ecx
  00ab6	8b 95 7c fb ff
	ff		 mov	 edx, DWORD PTR $T2[ebp+4]
  00abc	52		 push	 edx
  00abd	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00ac3	50		 push	 eax
  00ac4	b9 00 00 00 00	 mov	 ecx, OFFSET ?level1@@3V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@A ; level1
  00ac9	e8 00 00 00 00	 call	 ??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
  00ace	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00ad5	68 00 00 00 00	 push	 OFFSET ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  00ada	6a 0e		 push	 14			; 0000000eH
  00adc	6a 10		 push	 16			; 00000010H
  00ade	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp]
  00ae4	51		 push	 ecx
  00ae5	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00aea	68 00 00 00 00	 push	 OFFSET ??__Flevel1@@YAXXZ ; `dynamic atexit destructor for 'level1''
  00aef	e8 00 00 00 00	 call	 _atexit
  00af4	83 c4 04	 add	 esp, 4
  00af7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00afa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b01	59		 pop	 ecx
  00b02	5f		 pop	 edi
  00b03	8b e5		 mov	 esp, ebp
  00b05	5d		 pop	 ebp
  00b06	8b e3		 mov	 esp, ebx
  00b08	5b		 pop	 ebx
  00b09	c3		 ret	 0
text$di	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Elevel1@@YAXXZ$0:
  00000	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$1:
  0000b	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+16]
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$2:
  00016	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+32]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$3:
  00021	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+48]
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$4:
  0002c	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+64]
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$5:
  00037	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+80]
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$6:
  00042	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+96]
  00048	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$7:
  0004d	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp+112]
  00053	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$8:
  00058	8d 4d 88	 lea	 ecx, DWORD PTR $T61[ebp+128]
  0005b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$9:
  00060	8d 4d 98	 lea	 ecx, DWORD PTR $T61[ebp+144]
  00063	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$10:
  00068	8d 4d a8	 lea	 ecx, DWORD PTR $T61[ebp+160]
  0006b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$11:
  00070	8d 4d b8	 lea	 ecx, DWORD PTR $T61[ebp+176]
  00073	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$12:
  00078	8d 4d c8	 lea	 ecx, DWORD PTR $T61[ebp+192]
  0007b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??__Elevel1@@YAXXZ$14:
  00080	68 00 00 00 00	 push	 OFFSET ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  00085	6a 0e		 push	 14			; 0000000eH
  00087	6a 10		 push	 16			; 00000010H
  00089	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T61[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00095	c3		 ret	 0
  00096	cc		 int	 3
  00097	cc		 int	 3
  00098	cc		 int	 3
  00099	cc		 int	 3
  0009a	cc		 int	 3
__ehhandler$??__Elevel1@@YAXXZ:
  0009b	90		 npad	 1
  0009c	90		 npad	 1
  0009d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000a1	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a4	8b 8a 3c fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1220]
  000aa	33 c8		 xor	 ecx, eax
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__Elevel1@@YAXXZ
  000b6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__Elevel1@@YAXXZ ENDP					; `dynamic initializer for 'level1''
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$destroy@V?$vector@HV?$allocator@H@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$vector@HV?$allocator@H@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >, COMDAT

; 719  :     static _CONSTEXPR20_DYNALLOC void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 720  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 721  :         _STD destroy_at(_Ptr);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??$destroy_at@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAXQAV?$vector@HV?$allocator@H@std@@@0@@Z ; std::destroy_at<std::vector<int,std::allocator<int> > >
  00016	83 c4 04	 add	 esp, 4

; 722  : #else // __cpp_lib_constexpr_dynamic_alloc
; 723  :         _Ptr->~_Uty();
; 724  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 725  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$destroy@V?$vector@HV?$allocator@H@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT

; 945  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00027	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 946  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 947  :     using _Ty = typename _Alloc::value_type;
; 948  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 949  :         for (; _First != _Last; ++_First) {

  0002c	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  00037	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003a	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0003d	74 1b		 je	 SHORT $LN5@Destroy_ra

; 950  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  0003f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ??$_Unfancy@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@PAV10@@Z ; std::_Unfancy<std::vector<int,std::allocator<int> > >
  00048	83 c4 04	 add	 esp, 4
  0004b	50		 push	 eax
  0004c	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$destroy@V?$vector@HV?$allocator@H@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >
  00055	83 c4 08	 add	 esp, 8

; 951  :         }

  00058	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN5@Destroy_ra:

; 952  :     }
; 953  : }

  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
  00077	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$construct_at@HAAHX@std@@YAPAHQAHAAH@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Location$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct_at@HAAHX@std@@YAPAHQAHAAH@Z PROC		; std::construct_at<int,int &,void>, COMDAT

; 143  :     noexcept(::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 144  :     return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00015	8b 45 08	 mov	 eax, DWORD PTR __Location$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAH@std@@YAPAXPAH@Z ; std::_Voidify_iter<int *>
  0001e	83 c4 04	 add	 esp, 4
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>
  00038	83 c4 04	 add	 esp, 4
  0003b	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]
  00040	89 02		 mov	 DWORD PTR [edx], eax
  00042	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 145  : }

  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$construct_at@HAAHX@std@@YAPAHQAHAAH@Z ENDP		; std::construct_at<int,int &,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@HAAH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHAAH@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HAAH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHAAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int &>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 708  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 709  :         if (_STD is_constant_evaluated()) {

  00015	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN2@construct

; 710  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);

  00021	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??$construct_at@HAAHX@std@@YAPAHQAHAAH@Z ; std::construct_at<int,int &,void>
  00037	83 c4 08	 add	 esp, 8

; 711  :         } else

  0003a	eb 2d		 jmp	 SHORT $LN1@construct
$LN2@construct:

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  0003c	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAH@std@@YAPAXPAH@Z ; std::_Voidify_iter<int *>
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	6a 04		 push	 4
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00050	83 c4 08	 add	 esp, 8
  00053	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00056	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>
  0005f	83 c4 04	 add	 esp, 4
  00062	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 02		 mov	 DWORD PTR [edx], eax
$LN1@construct:

; 712  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 713  :         {
; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 715  :         }
; 716  :     }

  00069	83 c4 04	 add	 esp, 4
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
??$construct@HAAH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHAAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __589FA321_type_traits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1445 : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@AAH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXAAH@Z
_TEXT	SEGMENT
tv74 = -16						; size = 4
tv76 = -12						; size = 4
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXAAH@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int &>, COMDAT
; _this$ = ecx

; 1630 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1631 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00024	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f8	 mov	 DWORD PTR tv78[ebp], eax
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPAHPAH@Z ; std::_Unfancy<int>
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 f4	 mov	 DWORD PTR tv76[ebp], eax
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004b	89 4d f0	 mov	 DWORD PTR tv74[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR tv78[ebp]
  00051	52		 push	 edx
  00052	8b 45 f4	 mov	 eax, DWORD PTR tv76[ebp]
  00055	50		 push	 eax
  00056	8b 4d f0	 mov	 ecx, DWORD PTR tv74[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??$construct@HAAH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHAAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int &>
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1632 :         ++_Last;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	83 c0 04	 add	 eax, 4
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1633 :     }

  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
??$_Emplace_back@AAH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXAAH@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__Count$ = -28						; size = 4
__Dest_ch$ = -24					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -16					; size = 4
__DestPtr$ = -12					; size = 4
__LastPtr$ = -8						; size = 4
__FirstPtr$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Copy_memmove<int *,int *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4160 :     auto _FirstPtr              = _To_address(_First);

  0002a	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_To_address@PAH@std@@YA?A_PABQAH@Z ; std::_To_address<int *>
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 fc	 mov	 DWORD PTR __FirstPtr$[ebp], eax

; 4161 :     auto _LastPtr               = _To_address(_Last);

  00039	8d 4d 0c	 lea	 ecx, DWORD PTR __Last$[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??$_To_address@PAH@std@@YA?A_PABQAH@Z ; std::_To_address<int *>
  00042	83 c4 04	 add	 esp, 4
  00045	89 45 f8	 mov	 DWORD PTR __LastPtr$[ebp], eax

; 4162 :     auto _DestPtr               = _To_address(_Dest);

  00048	8d 55 10	 lea	 edx, DWORD PTR __Dest$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$_To_address@PAH@std@@YA?A_PABQAH@Z ; std::_To_address<int *>
  00051	83 c4 04	 add	 esp, 4
  00054	89 45 f4	 mov	 DWORD PTR __DestPtr$[ebp], eax

; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

  00057	8b 45 fc	 mov	 eax, DWORD PTR __FirstPtr$[ebp]
  0005a	89 45 f0	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR __LastPtr$[ebp]
  00060	89 4d ec	 mov	 DWORD PTR __Last_ch$[ebp], ecx

; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

  00063	8b 55 f4	 mov	 edx, DWORD PTR __DestPtr$[ebp]
  00066	89 55 e8	 mov	 DWORD PTR __Dest_ch$[ebp], edx

; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0006c	2b 45 f0	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0006f	89 45 e4	 mov	 DWORD PTR __Count$[ebp], eax

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 f0	 mov	 edx, DWORD PTR __First_ch$[ebp]
  00079	52		 push	 edx
  0007a	8b 45 e8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _memmove
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  00086	8b 45 e8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00089	03 45 e4	 add	 eax, DWORD PTR __Count$[ebp]

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  0008c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAH@std@@YA?A_TABQAH@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAH@std@@YA?A_TABQAH@Z PROC		; std::_Get_unwrapped<int * const &>, COMDAT

; 1324 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1325 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1326 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1327 :         return _It + 0;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 1328 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1329 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1330 :     } else {
; 1331 :         return static_cast<_Iter&&>(_It);
; 1332 :     }
; 1333 : }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Get_unwrapped@ABQAH@std@@YA?A_TABQAH@Z ENDP		; std::_Get_unwrapped<int * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
__Backout$ = -40					; size = 12
__ULast$ = -24						; size = 4
__UFirst$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_copy<int *,std::allocator<int> >, COMDAT

; 1649 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001c	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001f	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00022	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00025	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00028	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00031	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0004d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1650 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1651 :     // note: only called internally from elsewhere in the STL
; 1652 :     using _Ptrval = typename _Alloc::value_type*;
; 1653 : 
; 1654 :     auto _UFirst      = _Get_unwrapped(_First);

  00052	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQAH@std@@YA?A_TABQAH@Z ; std::_Get_unwrapped<int * const &>
  0005b	83 c4 04	 add	 esp, 4
  0005e	89 45 ec	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1655 :     const auto _ULast = _Get_unwrapped(_Last);

  00061	8d 4d 0c	 lea	 ecx, DWORD PTR __Last$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQAH@std@@YA?A_TABQAH@Z ; std::_Get_unwrapped<int * const &>
  0006a	83 c4 04	 add	 esp, 4
  0006d	89 45 e8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1656 : 
; 1657 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1658 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1659 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1660 :         if (!_STD is_constant_evaluated())

  00070	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  00075	0f b6 d0	 movzx	 edx, al
  00078	85 d2		 test	 edx, edx
  0007a	75 34		 jne	 SHORT $LN5@Uninitiali

; 1661 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1662 :         {
; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0007c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPAHPAH@Z ; std::_Unfancy<int>
  00085	83 c4 04	 add	 esp, 4
  00088	50		 push	 eax
  00089	8b 4d e8	 mov	 ecx, DWORD PTR __ULast$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 ec	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1664 :             _Dest += _ULast - _UFirst;

  00099	8b 45 e8	 mov	 eax, DWORD PTR __ULast$[ebp]
  0009c	2b 45 ec	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0009f	c1 f8 02	 sar	 eax, 2
  000a2	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000a5	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000a8	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx

; 1665 :             return _Dest;

  000ab	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  000ae	eb 5f		 jmp	 SHORT $LN1@Uninitiali
$LN5@Uninitiali:

; 1666 :         }
; 1667 :     }
; 1668 : 
; 1669 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000b0	6a 0c		 push	 12			; 0000000cH
  000b2	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000b5	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXI@Z
  000ba	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000c1	51		 push	 ecx
  000c2	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000c5	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@PAHAAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  000d1	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  000d3	8b 55 ec	 mov	 edx, DWORD PTR __UFirst$[ebp]
  000d6	83 c2 04	 add	 edx, 4
  000d9	89 55 ec	 mov	 DWORD PTR __UFirst$[ebp], edx
$LN4@Uninitiali:
  000dc	8b 45 ec	 mov	 eax, DWORD PTR __UFirst$[ebp]
  000df	3b 45 e8	 cmp	 eax, DWORD PTR __ULast$[ebp]
  000e2	74 0e		 je	 SHORT $LN3@Uninitiali

; 1671 :         _Backout._Emplace_back(*_UFirst);

  000e4	8b 4d ec	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  000e7	51		 push	 ecx
  000e8	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000eb	e8 00 00 00 00	 call	 ??$_Emplace_back@AAH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXAAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int &>

; 1672 :     }

  000f0	eb e1		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1673 : 
; 1674 :     return _Backout._Release();

  000f2	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000f5	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEPAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
  000fa	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  000fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00104	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00107	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
  0010c	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1675 : }

  0010f	52		 push	 edx
  00110	8b cd		 mov	 ecx, ebp
  00112	50		 push	 eax
  00113	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Uninitiali
  00119	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011e	58		 pop	 eax
  0011f	5a		 pop	 edx
  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012a	59		 pop	 ecx
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012e	33 cd		 xor	 ecx, ebp
  00130	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00135	83 c4 30	 add	 esp, 48			; 00000030H
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
  00143	90		 npad	 1
$LN11@Uninitiali:
  00144	01 00 00 00	 DD	 1
  00148	00 00 00 00	 DD	 $LN10@Uninitiali
$LN10@Uninitiali:
  0014c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00150	0c 00 00 00	 DD	 12			; 0000000cH
  00154	00 00 00 00	 DD	 $LN8@Uninitiali
$LN8@Uninitiali:
  00158	5f		 DB	 95			; 0000005fH
  00159	42		 DB	 66			; 00000042H
  0015a	61		 DB	 97			; 00000061H
  0015b	63		 DB	 99			; 00000063H
  0015c	6b		 DB	 107			; 0000006bH
  0015d	6f		 DB	 111			; 0000006fH
  0015e	75		 DB	 117			; 00000075H
  0015f	74		 DB	 116			; 00000074H
  00160	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_copy<int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z PROC ; std::forward<std::allocator<int> >, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __589FA321_type_traits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1445 : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z ENDP ; std::forward<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<int *>, COMDAT
; _this$ = ecx

; 1652 :     _CONSTEXPR20_CONTAINER pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1653 :         // copy [_First, _Last) to raw _Dest, using allocator
; 1654 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00020	50		 push	 eax
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<int *,std::allocator<int> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 1655 :     }

  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >, COMDAT
; _this$ = ecx

; 1395 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z ; std::forward<std::allocator<int> >
  00021	83 c4 04	 add	 esp, 4
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAV?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAXPAV?$vector@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAV?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAXPAV?$vector@HV?$allocator@H@std@@@0@@Z PROC ; std::_Voidify_iter<std::vector<int,std::allocator<int> > *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  0000d	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Voidify_iter@PAV?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAXPAV?$vector@HV?$allocator@H@std@@@0@@Z ENDP ; std::_Voidify_iter<std::vector<int,std::allocator<int> > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$construct_at@V?$vector@HV?$allocator@H@std@@@std@@ABV12@X@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QAV10@ABV10@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
$T1 = -4						; size = 4
__Location$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct_at@V?$vector@HV?$allocator@H@std@@@std@@ABV12@X@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QAV10@ABV10@@Z PROC ; std::construct_at<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &,void>, COMDAT

; 143  :     noexcept(::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 144  :     return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Location$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAV?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAXPAV?$vector@HV?$allocator@H@std@@@0@@Z ; std::_Voidify_iter<std::vector<int,std::allocator<int> > *>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	6a 10		 push	 16			; 00000010H
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00032	83 c4 08	 add	 esp, 8
  00035	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z ; std::forward<std::vector<int,std::allocator<int> > const &>
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 f8	 mov	 DWORD PTR tv78[ebp], eax
  00047	8b 55 f8	 mov	 edx, DWORD PTR tv78[ebp]
  0004a	52		 push	 edx
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0004e	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >

; 145  : }

  00053	83 c4 08	 add	 esp, 8
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$construct_at@V?$vector@HV?$allocator@H@std@@@std@@ABV12@X@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QAV10@ABV10@@Z ENDP ; std::construct_at<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@V?$vector@HV?$allocator@H@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@ABV31@@Z
_TEXT	SEGMENT
tv85 = -8						; size = 4
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$vector@HV?$allocator@H@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@ABV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 708  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 709  :         if (_STD is_constant_evaluated()) {

  0001e	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  00023	0f b6 c0	 movzx	 eax, al
  00026	85 c0		 test	 eax, eax
  00028	74 1b		 je	 SHORT $LN2@construct

; 710  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);

  0002a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z ; std::forward<std::vector<int,std::allocator<int> > const &>
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 ??$construct_at@V?$vector@HV?$allocator@H@std@@@std@@ABV12@X@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QAV10@ABV10@@Z ; std::construct_at<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &,void>
  00040	83 c4 08	 add	 esp, 8

; 711  :         } else

  00043	eb 35		 jmp	 SHORT $LN1@construct
$LN2@construct:

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00045	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAV?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAXPAV?$vector@HV?$allocator@H@std@@@0@@Z ; std::_Voidify_iter<std::vector<int,std::allocator<int> > *>
  0004e	83 c4 04	 add	 esp, 4
  00051	50		 push	 eax
  00052	6a 10		 push	 16			; 00000010H
  00054	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00059	83 c4 08	 add	 esp, 8
  0005c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0005f	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z ; std::forward<std::vector<int,std::allocator<int> > const &>
  00068	83 c4 04	 add	 esp, 4
  0006b	89 45 f8	 mov	 DWORD PTR tv85[ebp], eax
  0006e	8b 55 f8	 mov	 edx, DWORD PTR tv85[ebp]
  00071	52		 push	 edx
  00072	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00075	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
$LN1@construct:

; 712  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 713  :         {
; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 715  :         }
; 716  :     }

  0007a	83 c4 08	 add	 esp, 8
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
??$construct@V?$vector@HV?$allocator@H@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@ABV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z PROC ; std::forward<std::vector<int,std::allocator<int> > const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __589FA321_type_traits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1445 : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z ENDP ; std::forward<std::vector<int,std::allocator<int> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@PAV10@@Z PROC ; std::_Unfancy<std::vector<int,std::allocator<int> > >, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E458E21C_xstddef
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 289  :     return _Ptr;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 290  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Unfancy@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@PAV10@@Z ENDP ; std::_Unfancy<std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@ABV?$vector@HV?$allocator@H@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXABV?$vector@HV?$allocator@H@std@@@1@@Z
_TEXT	SEGMENT
tv74 = -16						; size = 4
tv76 = -12						; size = 4
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@ABV?$vector@HV?$allocator@H@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXABV?$vector@HV?$allocator@H@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>, COMDAT
; _this$ = ecx

; 1630 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1631 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00024	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$forward@ABV?$vector@HV?$allocator@H@std@@@std@@@std@@YAABV?$vector@HV?$allocator@H@std@@@0@ABV10@@Z ; std::forward<std::vector<int,std::allocator<int> > const &>
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f8	 mov	 DWORD PTR tv78[ebp], eax
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$_Unfancy@V?$vector@HV?$allocator@H@std@@@std@@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@PAV10@@Z ; std::_Unfancy<std::vector<int,std::allocator<int> > >
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 f4	 mov	 DWORD PTR tv76[ebp], eax
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004b	89 4d f0	 mov	 DWORD PTR tv74[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR tv78[ebp]
  00051	52		 push	 edx
  00052	8b 45 f4	 mov	 eax, DWORD PTR tv76[ebp]
  00055	50		 push	 eax
  00056	8b 4d f0	 mov	 ecx, DWORD PTR tv74[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??$construct@V?$vector@HV?$allocator@H@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@QAV?$vector@HV?$allocator@H@std@@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1632 :         ++_Last;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	83 c0 10	 add	 eax, 16			; 00000010H
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1633 :     }

  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
??$_Emplace_back@ABV?$vector@HV?$allocator@H@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXABV?$vector@HV?$allocator@H@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00011	50		 push	 eax
  00012	6a 00		 push	 0
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release, COMDAT
; _this$ = ecx

; 1635 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1636 :         _First = _Last;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 10		 mov	 DWORD PTR [eax], edx

; 1637 :         return _Last;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1638 :     }

  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
; _this$ = ecx

; 1625 :     _CONSTEXPR20_DYNALLOC ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1626 :         _Destroy_range(_First, _Last, _Al);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	51		 push	 ecx
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1627 :     }

  00034	83 c4 04	 add	 esp, 4
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@PAV?$vector@HV?$allocator@H@std@@@1@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@PAV?$vector@HV?$allocator@H@std@@@1@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
; _this$ = ecx

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001e	89 08		 mov	 DWORD PTR [eax], ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00026	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  0002f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@PAV?$vector@HV?$allocator@H@std@@@1@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQBV?$vector@HV?$allocator@H@std@@@std@@@std@@YA?A_TABQBV?$vector@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQBV?$vector@HV?$allocator@H@std@@@std@@@std@@YA?A_TABQBV?$vector@HV?$allocator@H@std@@@0@@Z PROC ; std::_Get_unwrapped<std::vector<int,std::allocator<int> > const * const &>, COMDAT

; 1324 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1325 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1326 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1327 :         return _It + 0;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 1328 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1329 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1330 :     } else {
; 1331 :         return static_cast<_Iter&&>(_It);
; 1332 :     }
; 1333 : }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Get_unwrapped@ABQBV?$vector@HV?$allocator@H@std@@@std@@@std@@YA?A_TABQBV?$vector@HV?$allocator@H@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::vector<int,std::allocator<int> > const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
__Backout$ = -40					; size = 12
__ULast$ = -24						; size = 4
__UFirst$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT

; 1649 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001c	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001f	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00022	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00025	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00028	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00031	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0004d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1650 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1651 :     // note: only called internally from elsewhere in the STL
; 1652 :     using _Ptrval = typename _Alloc::value_type*;
; 1653 : 
; 1654 :     auto _UFirst      = _Get_unwrapped(_First);

  00052	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQBV?$vector@HV?$allocator@H@std@@@std@@@std@@YA?A_TABQBV?$vector@HV?$allocator@H@std@@@0@@Z ; std::_Get_unwrapped<std::vector<int,std::allocator<int> > const * const &>
  0005b	83 c4 04	 add	 esp, 4
  0005e	89 45 ec	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1655 :     const auto _ULast = _Get_unwrapped(_Last);

  00061	8d 4d 0c	 lea	 ecx, DWORD PTR __Last$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQBV?$vector@HV?$allocator@H@std@@@std@@@std@@YA?A_TABQBV?$vector@HV?$allocator@H@std@@@0@@Z ; std::_Get_unwrapped<std::vector<int,std::allocator<int> > const * const &>
  0006a	83 c4 04	 add	 esp, 4
  0006d	89 45 e8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1656 : 
; 1657 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1658 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1659 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1660 :         if (!_STD is_constant_evaluated())
; 1661 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1662 :         {
; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1664 :             _Dest += _ULast - _UFirst;
; 1665 :             return _Dest;
; 1666 :         }
; 1667 :     }
; 1668 : 
; 1669 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00070	6a 0c		 push	 12			; 0000000cH
  00072	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00075	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXI@Z
  0007a	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00081	50		 push	 eax
  00082	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00085	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@PAV?$vector@HV?$allocator@H@std@@@1@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  00091	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00093	8b 4d ec	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00096	83 c1 10	 add	 ecx, 16			; 00000010H
  00099	89 4d ec	 mov	 DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
  0009c	8b 55 ec	 mov	 edx, DWORD PTR __UFirst$[ebp]
  0009f	3b 55 e8	 cmp	 edx, DWORD PTR __ULast$[ebp]
  000a2	74 0e		 je	 SHORT $LN3@Uninitiali

; 1671 :         _Backout._Emplace_back(*_UFirst);

  000a4	8b 45 ec	 mov	 eax, DWORD PTR __UFirst$[ebp]
  000a7	50		 push	 eax
  000a8	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000ab	e8 00 00 00 00	 call	 ??$_Emplace_back@ABV?$vector@HV?$allocator@H@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEXABV?$vector@HV?$allocator@H@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>

; 1672 :     }

  000b0	eb e1		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1673 : 
; 1674 :     return _Backout._Release();

  000b2	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000b5	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release
  000ba	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  000bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c4	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000c7	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
  000cc	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]

; 1675 : }

  000cf	52		 push	 edx
  000d0	8b cd		 mov	 ecx, ebp
  000d2	50		 push	 eax
  000d3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  000d9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000de	58		 pop	 eax
  000df	5a		 pop	 edx
  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ee	33 cd		 xor	 ecx, ebp
  000f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f5	83 c4 30	 add	 esp, 48			; 00000030H
  000f8	3b ec		 cmp	 ebp, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
  00103	90		 npad	 1
$LN10@Uninitiali:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  0010c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00110	0c 00 00 00	 DD	 12			; 0000000cH
  00114	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  00118	5f		 DB	 95			; 0000005fH
  00119	42		 DB	 66			; 00000042H
  0011a	61		 DB	 97			; 00000061H
  0011b	63		 DB	 99			; 00000063H
  0011c	6b		 DB	 107			; 0000006bH
  0011d	6f		 DB	 111			; 0000006fH
  0011e	75		 DB	 117			; 00000075H
  0011f	74		 DB	 116			; 00000074H
  00120	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Ucopy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEPAV?$vector@HV?$allocator@H@std@@@1@PBV21@0PAV21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEPAV?$vector@HV?$allocator@H@std@@@1@PBV21@0PAV21@@Z PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>, COMDAT
; _this$ = ecx

; 1652 :     _CONSTEXPR20_CONTAINER pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1653 :         // copy [_First, _Last) to raw _Dest, using allocator
; 1654 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
  00020	50		 push	 eax
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBV?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@YAPAV?$vector@HV?$allocator@H@std@@@0@QBV10@0PAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 1655 :     }

  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEPAV?$vector@HV?$allocator@H@std@@@1@PBV21@0PAV21@@Z ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >, COMDAT
; _this$ = ecx

; 34   :     _CONSTEXPR20_DYNALLOC ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 35   :         if (_Target) {

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	74 0a		 je	 SHORT $LN3@Tidy_guard

; 36   :             _Target->_Tidy();

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00025	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy
$LN3@Tidy_guard:

; 37   :         }
; 38   :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$distance@PBV?$vector@HV?$allocator@H@std@@@std@@@std@@YAHPBV?$vector@HV?$allocator@H@std@@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PBV?$vector@HV?$allocator@H@std@@@std@@@std@@YAHPBV?$vector@HV?$allocator@H@std@@@0@0@Z PROC ; std::distance<std::vector<int,std::allocator<int> > const *>, COMDAT

; 1588 : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1589 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  0000d	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00010	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00013	c1 f8 04	 sar	 eax, 4

; 1591 :     } else {
; 1592 :         _Adl_verify_range(_First, _Last);
; 1593 :         auto _UFirst             = _Get_unwrapped(_First);
; 1594 :         const auto _ULast        = _Get_unwrapped(_Last);
; 1595 :         _Iter_diff_t<_InIt> _Off = 0;
; 1596 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1597 :             ++_Off;
; 1598 :         }
; 1599 : 
; 1600 :         return _Off;
; 1601 :     }
; 1602 : }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$distance@PBV?$vector@HV?$allocator@H@std@@@std@@@std@@YAHPBV?$vector@HV?$allocator@H@std@@@0@0@Z ENDP ; std::distance<std::vector<int,std::allocator<int> > const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __589FA321_type_traits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1445 : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$forward@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__My_data$2 = -40					; size = 4
__Guard$3 = -32						; size = 4
__Count$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>, COMDAT
; _this$ = ecx

; 524  :     _CONSTEXPR20_CONTAINER void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00022	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00025	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00028	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 525  :         const auto _Count = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

  0004f	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00052	50		 push	 eax
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ??$distance@PBV?$vector@HV?$allocator@H@std@@@std@@@std@@YAHPBV?$vector@HV?$allocator@H@std@@@0@0@Z ; std::distance<std::vector<int,std::allocator<int> > const *>
  0005c	83 c4 08	 add	 esp, 8
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00065	83 c4 04	 add	 esp, 4
  00068	89 45 e8	 mov	 DWORD PTR __Count$[ebp], eax

; 526  :         if (_Count != 0) {

  0006b	83 7d e8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006f	74 52		 je	 SHORT $LN1@Range_cons

; 527  :             _Buy_nonzero(_Count);

  00071	8b 55 e8	 mov	 edx, DWORD PTR __Count$[ebp]
  00074	52		 push	 edx
  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero

; 528  :             _Tidy_guard<vector> _Guard{this};

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00080	89 45 e0	 mov	 DWORD PTR __Guard$3[ebp], eax
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 529  :             auto& _My_data   = _Mypair._Myval2;

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	89 4d d8	 mov	 DWORD PTR __My_data$2[ebp], ecx

; 530  :             _My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);

  00090	8b 55 d8	 mov	 edx, DWORD PTR __My_data$2[ebp]
  00093	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00096	50		 push	 eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0009e	52		 push	 edx
  0009f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	e8 00 00 00 00	 call	 ??$_Ucopy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEPAV?$vector@HV?$allocator@H@std@@@1@PBV21@0PAV21@@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>
  000a7	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$2[ebp]
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 531  :             _Guard._Target   = nullptr;

  000ad	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Guard$3[ebp], 0

; 532  :         }

  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bb	8d 4d e0	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  000be	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >
$LN1@Range_cons:

; 533  :     }

  000c3	52		 push	 edx
  000c4	8b cd		 mov	 ecx, ebp
  000c6	50		 push	 eax
  000c7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Range_cons
  000cd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d2	58		 pop	 eax
  000d3	5a		 pop	 edx
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	83 c4 28	 add	 esp, 40			; 00000028H
  000ec	3b ec		 cmp	 ebp, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 0c 00	 ret	 12			; 0000000cH
  000f9	0f 1f 00	 npad	 3
$LN8@Range_cons:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN7@Range_cons
$LN7@Range_cons:
  00104	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00108	04 00 00 00	 DD	 4
  0010c	00 00 00 00	 DD	 $LN5@Range_cons
$LN5@Range_cons:
  00110	5f		 DB	 95			; 0000005fH
  00111	47		 DB	 71			; 00000047H
  00112	75		 DB	 117			; 00000075H
  00113	61		 DB	 97			; 00000061H
  00114	72		 DB	 114			; 00000072H
  00115	64		 DB	 100			; 00000064H
  00116	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0V?$vector@HV?$allocator@H@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0V?$vector@HV?$allocator@H@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??$?0V?$vector@HV?$allocator@H@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>, COMDAT
; _this$ = ecx

; 1395 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>
  00021	83 c4 04	 add	 esp, 4
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??$?0ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : _CONSTEXPR20_DYNALLOC void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 999  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1000 :     using _Ty = typename _Alloc::value_type;
; 1001 :     _Ptr->~_Ty();
; 1002 :     _Deallocate_plain(_Al, _Ptr);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  0001a	83 c4 08	 add	 esp, 8

; 1003 : }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 945  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 946  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 947  :     using _Ty = typename _Alloc::value_type;
; 948  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 949  :         for (; _First != _Last; ++_First) {
; 950  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 951  :         }
; 952  :     }
; 953  : }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAH@std@@YAPAXPAH@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAH@std@@YAPAXPAH@Z PROC		; std::_Voidify_iter<int *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  0000d	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Voidify_iter@PAH@std@@YAPAXPAH@Z ENDP		; std::_Voidify_iter<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$construct_at@HABHX@std@@YAPAHQAHABH@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Location$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct_at@HABHX@std@@YAPAHQAHABH@Z PROC		; std::construct_at<int,int const &,void>, COMDAT

; 143  :     noexcept(::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 144  :     return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00015	8b 45 08	 mov	 eax, DWORD PTR __Location$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAH@std@@YAPAXPAH@Z ; std::_Voidify_iter<int *>
  0001e	83 c4 04	 add	 esp, 4
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>
  00038	83 c4 04	 add	 esp, 4
  0003b	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]
  00040	89 02		 mov	 DWORD PTR [edx], eax
  00042	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 145  : }

  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$construct_at@HABHX@std@@YAPAHQAHABH@Z ENDP		; std::construct_at<int,int const &,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@HABH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHABH@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HABH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHABH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 708  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 709  :         if (_STD is_constant_evaluated()) {

  00015	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN2@construct

; 710  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);

  00021	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>
  0002a	83 c4 04	 add	 esp, 4
  0002d	50		 push	 eax
  0002e	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??$construct_at@HABHX@std@@YAPAHQAHABH@Z ; std::construct_at<int,int const &,void>
  00037	83 c4 08	 add	 esp, 8

; 711  :         } else

  0003a	eb 2d		 jmp	 SHORT $LN1@construct
$LN2@construct:

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  0003c	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAH@std@@YAPAXPAH@Z ; std::_Voidify_iter<int *>
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	6a 04		 push	 4
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00050	83 c4 08	 add	 esp, 8
  00053	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00056	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>
  0005f	83 c4 04	 add	 esp, 4
  00062	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 02		 mov	 DWORD PTR [edx], eax
$LN1@construct:

; 712  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 713  :         {
; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 715  :         }
; 716  :     }

  00069	83 c4 04	 add	 esp, 4
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
??$construct@HABH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHABH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __589FA321_type_traits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1445 : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Emplace_back@ABH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
tv74 = -16						; size = 4
tv76 = -12						; size = 4
tv78 = -8						; size = 4
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@ABH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int const &>, COMDAT
; _this$ = ecx

; 1630 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1631 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00024	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f8	 mov	 DWORD PTR tv78[ebp], eax
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPAHPAH@Z ; std::_Unfancy<int>
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 f4	 mov	 DWORD PTR tv76[ebp], eax
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004b	89 4d f0	 mov	 DWORD PTR tv74[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR tv78[ebp]
  00051	52		 push	 edx
  00052	8b 45 f4	 mov	 eax, DWORD PTR tv76[ebp]
  00055	50		 push	 eax
  00056	8b 4d f0	 mov	 ecx, DWORD PTR tv74[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??$construct@HABH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@QAHABH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1632 :         ++_Last;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	83 c0 04	 add	 eax, 4
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1633 :     }

  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
??$_Emplace_back@ABH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00011	50		 push	 eax
  00012	6a 00		 push	 0
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEPAHXZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release, COMDAT
; _this$ = ecx

; 1635 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1636 :         _First = _Last;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 10		 mov	 DWORD PTR [eax], edx

; 1637 :         return _Last;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1638 :     }

  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEPAHXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >, COMDAT
; _this$ = ecx

; 1625 :     _CONSTEXPR20_DYNALLOC ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1626 :         _Destroy_range(_First, _Last, _Al);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	51		 push	 ecx
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1627 :     }

  00034	83 c4 04	 add	 esp, 4
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@PAHAAV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@PAHAAV?$allocator@H@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >, COMDAT
; _this$ = ecx

; 1620 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001e	89 08		 mov	 DWORD PTR [eax], ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00026	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  0002f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@PAHAAV?$allocator@H@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z
_TEXT	SEGMENT
__Count$ = -28						; size = 4
__Dest_ch$ = -24					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -16					; size = 4
__DestPtr$ = -12					; size = 4
__LastPtr$ = -8						; size = 4
__FirstPtr$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z PROC	; std::_Copy_memmove<int const *,int *>, COMDAT

; 4159 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4160 :     auto _FirstPtr              = _To_address(_First);

  0002a	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_To_address@PBH@std@@YA?A_PABQBH@Z ; std::_To_address<int const *>
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 fc	 mov	 DWORD PTR __FirstPtr$[ebp], eax

; 4161 :     auto _LastPtr               = _To_address(_Last);

  00039	8d 4d 0c	 lea	 ecx, DWORD PTR __Last$[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??$_To_address@PBH@std@@YA?A_PABQBH@Z ; std::_To_address<int const *>
  00042	83 c4 04	 add	 esp, 4
  00045	89 45 f8	 mov	 DWORD PTR __LastPtr$[ebp], eax

; 4162 :     auto _DestPtr               = _To_address(_Dest);

  00048	8d 55 10	 lea	 edx, DWORD PTR __Dest$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$_To_address@PAH@std@@YA?A_PABQAH@Z ; std::_To_address<int *>
  00051	83 c4 04	 add	 esp, 4
  00054	89 45 f4	 mov	 DWORD PTR __DestPtr$[ebp], eax

; 4163 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

  00057	8b 45 fc	 mov	 eax, DWORD PTR __FirstPtr$[ebp]
  0005a	89 45 f0	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4164 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR __LastPtr$[ebp]
  00060	89 4d ec	 mov	 DWORD PTR __Last_ch$[ebp], ecx

; 4165 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

  00063	8b 55 f4	 mov	 edx, DWORD PTR __DestPtr$[ebp]
  00066	89 55 e8	 mov	 DWORD PTR __Dest_ch$[ebp], edx

; 4166 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0006c	2b 45 f0	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0006f	89 45 e4	 mov	 DWORD PTR __Count$[ebp], eax

; 4167 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 f0	 mov	 edx, DWORD PTR __First_ch$[ebp]
  00079	52		 push	 edx
  0007a	8b 45 e8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _memmove
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4168 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4169 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  00086	8b 45 e8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00089	03 45 e4	 add	 eax, DWORD PTR __Count$[ebp]

; 4170 :     } else {
; 4171 :         return _Dest + (_LastPtr - _FirstPtr);
; 4172 :     }
; 4173 : }

  0008c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z ENDP	; std::_Copy_memmove<int const *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@H@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@H@std@@YAPAHPAH@Z PROC			; std::_Unfancy<int>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E458E21C_xstddef
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 289  :     return _Ptr;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 290  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Unfancy@H@std@@YAPAHPAH@Z ENDP			; std::_Unfancy<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$to_address@H@std@@YAPAHQAH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$to_address@H@std@@YAPAHQAH@Z PROC			; std::to_address<int>, COMDAT

; 211  : _NODISCARD constexpr _Ty* to_address(_Ty* const _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 212  :     static_assert(!is_function_v<_Ty>,
; 213  :         "N4810 20.10.4 [pointer.conversion]/2: The program is ill-formed if T is a function type.");
; 214  :     return _Val;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 215  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$to_address@H@std@@YAPAHQAH@Z ENDP			; std::to_address<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$to_address@$$CBH@std@@YAPBHQBH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$to_address@$$CBH@std@@YAPBHQBH@Z PROC		; std::to_address<int const >, COMDAT

; 211  : _NODISCARD constexpr _Ty* to_address(_Ty* const _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 212  :     static_assert(!is_function_v<_Ty>,
; 213  :         "N4810 20.10.4 [pointer.conversion]/2: The program is ill-formed if T is a function type.");
; 214  :     return _Val;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 215  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$to_address@$$CBH@std@@YAPBHQBH@Z ENDP		; std::to_address<int const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQBH@std@@YA?A_TABQBH@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQBH@std@@YA?A_TABQBH@Z PROC		; std::_Get_unwrapped<int const * const &>, COMDAT

; 1324 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1325 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1326 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1327 :         return _It + 0;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 1328 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1329 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1330 :     } else {
; 1331 :         return static_cast<_Iter&&>(_It);
; 1332 :     }
; 1333 : }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Get_unwrapped@ABQBH@std@@YA?A_TABQBH@Z ENDP		; std::_Get_unwrapped<int const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
__Backout$ = -40					; size = 12
__ULast$ = -24						; size = 4
__UFirst$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_copy<int const *,std::allocator<int> >, COMDAT

; 1649 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001c	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001f	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00022	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00025	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00028	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00031	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0004d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1650 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1651 :     // note: only called internally from elsewhere in the STL
; 1652 :     using _Ptrval = typename _Alloc::value_type*;
; 1653 : 
; 1654 :     auto _UFirst      = _Get_unwrapped(_First);

  00052	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQBH@std@@YA?A_TABQBH@Z ; std::_Get_unwrapped<int const * const &>
  0005b	83 c4 04	 add	 esp, 4
  0005e	89 45 ec	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1655 :     const auto _ULast = _Get_unwrapped(_Last);

  00061	8d 4d 0c	 lea	 ecx, DWORD PTR __Last$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ??$_Get_unwrapped@ABQBH@std@@YA?A_TABQBH@Z ; std::_Get_unwrapped<int const * const &>
  0006a	83 c4 04	 add	 esp, 4
  0006d	89 45 e8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1656 : 
; 1657 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1658 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1659 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1660 :         if (!_STD is_constant_evaluated())

  00070	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  00075	0f b6 d0	 movzx	 edx, al
  00078	85 d2		 test	 edx, edx
  0007a	75 34		 jne	 SHORT $LN5@Uninitiali

; 1661 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1662 :         {
; 1663 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0007c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPAHPAH@Z ; std::_Unfancy<int>
  00085	83 c4 04	 add	 esp, 4
  00088	50		 push	 eax
  00089	8b 4d e8	 mov	 ecx, DWORD PTR __ULast$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 ec	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 ??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z ; std::_Copy_memmove<int const *,int *>
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1664 :             _Dest += _ULast - _UFirst;

  00099	8b 45 e8	 mov	 eax, DWORD PTR __ULast$[ebp]
  0009c	2b 45 ec	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0009f	c1 f8 02	 sar	 eax, 2
  000a2	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000a5	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000a8	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx

; 1665 :             return _Dest;

  000ab	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  000ae	eb 5f		 jmp	 SHORT $LN1@Uninitiali
$LN5@Uninitiali:

; 1666 :         }
; 1667 :     }
; 1668 : 
; 1669 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000b0	6a 0c		 push	 12			; 0000000cH
  000b2	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000b5	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXI@Z
  000ba	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000c1	51		 push	 ecx
  000c2	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000c5	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@PAHAAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1670 :     for (; _UFirst != _ULast; ++_UFirst) {

  000d1	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  000d3	8b 55 ec	 mov	 edx, DWORD PTR __UFirst$[ebp]
  000d6	83 c2 04	 add	 edx, 4
  000d9	89 55 ec	 mov	 DWORD PTR __UFirst$[ebp], edx
$LN4@Uninitiali:
  000dc	8b 45 ec	 mov	 eax, DWORD PTR __UFirst$[ebp]
  000df	3b 45 e8	 cmp	 eax, DWORD PTR __ULast$[ebp]
  000e2	74 0e		 je	 SHORT $LN3@Uninitiali

; 1671 :         _Backout._Emplace_back(*_UFirst);

  000e4	8b 4d ec	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  000e7	51		 push	 ecx
  000e8	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000eb	e8 00 00 00 00	 call	 ??$_Emplace_back@ABH@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEXABH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int const &>

; 1672 :     }

  000f0	eb e1		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1673 : 
; 1674 :     return _Backout._Release();

  000f2	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  000f5	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAEPAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
  000fa	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  000fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00104	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00107	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
  0010c	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1675 : }

  0010f	52		 push	 edx
  00110	8b cd		 mov	 ecx, ebp
  00112	50		 push	 eax
  00113	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Uninitiali
  00119	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011e	58		 pop	 eax
  0011f	5a		 pop	 edx
  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012a	59		 pop	 ecx
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012e	33 cd		 xor	 ecx, ebp
  00130	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00135	83 c4 30	 add	 esp, 48			; 00000030H
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
  00143	90		 npad	 1
$LN11@Uninitiali:
  00144	01 00 00 00	 DD	 1
  00148	00 00 00 00	 DD	 $LN10@Uninitiali
$LN10@Uninitiali:
  0014c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00150	0c 00 00 00	 DD	 12			; 0000000cH
  00154	00 00 00 00	 DD	 $LN8@Uninitiali
$LN8@Uninitiali:
  00158	5f		 DB	 95			; 0000005fH
  00159	42		 DB	 66			; 00000042H
  0015a	61		 DB	 97			; 00000061H
  0015b	63		 DB	 99			; 00000063H
  0015c	6b		 DB	 107			; 0000006bH
  0015d	6f		 DB	 111			; 0000006fH
  0015e	75		 DB	 117			; 00000075H
  0015f	74		 DB	 116			; 00000074H
  00160	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_copy<int const *,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __1347750E_utility
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 08		 jae	 SHORT $LN3@min
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00030	eb 06		 jmp	 SHORT $LN4@min
$LN3@min:
  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00035	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@min:
  00038	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  0003b	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 69   : }

  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Ucopy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPBH0PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPBH0PAH@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<int const *>, COMDAT
; _this$ = ecx

; 1652 :     _CONSTEXPR20_CONTAINER pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1653 :         // copy [_First, _Last) to raw _Dest, using allocator
; 1654 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00020	50		 push	 eax
  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<int const *,std::allocator<int> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 1655 :     }

  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPBH0PAH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<int const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 34   :     _CONSTEXPR20_DYNALLOC ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 35   :         if (_Target) {

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	74 0a		 je	 SHORT $LN3@Tidy_guard

; 36   :             _Target->_Tidy();

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00025	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
$LN3@Tidy_guard:

; 37   :         }
; 38   :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$distance@PBH@std@@YAHPBH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PBH@std@@YAHPBH0@Z PROC			; std::distance<int const *>, COMDAT

; 1588 : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1589 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1590 :         return _Last - _First; // assume the iterator will do debug checking

  0000d	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00010	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00013	c1 f8 02	 sar	 eax, 2

; 1591 :     } else {
; 1592 :         _Adl_verify_range(_First, _Last);
; 1593 :         auto _UFirst             = _Get_unwrapped(_First);
; 1594 :         const auto _ULast        = _Get_unwrapped(_Last);
; 1595 :         _Iter_diff_t<_InIt> _Off = 0;
; 1596 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1597 :             ++_Off;
; 1598 :         }
; 1599 : 
; 1600 :         return _Off;
; 1601 :     }
; 1602 : }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$distance@PBH@std@@YAHPBH0@Z ENDP			; std::distance<int const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  0000d	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$construct_at@U_Container_proxy@std@@PAU_Container_base12@2@X@std@@YAPAU_Container_proxy@0@QAU10@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
$T1 = -4						; size = 4
__Location$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct_at@U_Container_proxy@std@@PAU_Container_base12@2@X@std@@YAPAU_Container_proxy@0@QAU10@$$QAPAU_Container_base12@0@@Z PROC ; std::construct_at<std::_Container_proxy,std::_Container_base12 *,void>, COMDAT

; 143  :     noexcept(::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 144  :     return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Location$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	6a 08		 push	 8
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00032	83 c4 08	 add	 esp, 8
  00035	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  00041	83 c4 04	 add	 esp, 4
  00044	8b 10		 mov	 edx, DWORD PTR [eax]
  00046	89 55 f8	 mov	 DWORD PTR tv78[ebp], edx
  00049	8b 45 f8	 mov	 eax, DWORD PTR tv78[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 145  : }

  00055	83 c4 08	 add	 esp, 8
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??$construct_at@U_Container_proxy@std@@PAU_Container_base12@2@X@std@@YAPAU_Container_proxy@0@QAU10@$$QAPAU_Container_base12@0@@Z ENDP ; std::construct_at<std::_Container_proxy,std::_Container_base12 *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __589FA321_type_traits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1445 : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E458E21C_xstddef
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 275  :     return __builtin_addressof(_Val);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E458E21C_xstddef
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 289  :     return _Ptr;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 290  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z PROC ; std::forward<std::allocator<int> const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __589FA321_type_traits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1445 : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z ENDP ; std::forward<std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__My_data$2 = -40					; size = 4
__Guard$3 = -32						; size = 4
__Count$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z PROC ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>, COMDAT
; _this$ = ecx

; 524  :     _CONSTEXPR20_CONTAINER void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00022	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00025	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00028	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 525  :         const auto _Count = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

  0004f	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00052	50		 push	 eax
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ??$distance@PBH@std@@YAHPBH0@Z ; std::distance<int const *>
  0005c	83 c4 08	 add	 esp, 8
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00065	83 c4 04	 add	 esp, 4
  00068	89 45 e8	 mov	 DWORD PTR __Count$[ebp], eax

; 526  :         if (_Count != 0) {

  0006b	83 7d e8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006f	74 52		 je	 SHORT $LN1@Range_cons

; 527  :             _Buy_nonzero(_Count);

  00071	8b 55 e8	 mov	 edx, DWORD PTR __Count$[ebp]
  00074	52		 push	 edx
  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z ; std::vector<int,std::allocator<int> >::_Buy_nonzero

; 528  :             _Tidy_guard<vector> _Guard{this};

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00080	89 45 e0	 mov	 DWORD PTR __Guard$3[ebp], eax
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 529  :             auto& _My_data   = _Mypair._Myval2;

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	89 4d d8	 mov	 DWORD PTR __My_data$2[ebp], ecx

; 530  :             _My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);

  00090	8b 55 d8	 mov	 edx, DWORD PTR __My_data$2[ebp]
  00093	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00096	50		 push	 eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0009e	52		 push	 edx
  0009f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	e8 00 00 00 00	 call	 ??$_Ucopy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPBH0PAH@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int const *>
  000a7	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$2[ebp]
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 531  :             _Guard._Target   = nullptr;

  000ad	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Guard$3[ebp], 0

; 532  :         }

  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bb	8d 4d e0	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  000be	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
$LN1@Range_cons:

; 533  :     }

  000c3	52		 push	 edx
  000c4	8b cd		 mov	 ecx, ebp
  000c6	50		 push	 eax
  000c7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Range_cons
  000cd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d2	58		 pop	 eax
  000d3	5a		 pop	 edx
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	83 c4 28	 add	 esp, 40			; 00000028H
  000ec	3b ec		 cmp	 ebp, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 0c 00	 ret	 12			; 0000000cH
  000f9	0f 1f 00	 npad	 3
$LN8@Range_cons:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN7@Range_cons
$LN7@Range_cons:
  00104	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00108	04 00 00 00	 DD	 4
  0010c	00 00 00 00	 DD	 $LN5@Range_cons
$LN5@Range_cons:
  00110	5f		 DB	 95			; 0000005fH
  00111	47		 DB	 71			; 00000047H
  00112	75		 DB	 117			; 00000075H
  00113	61		 DB	 97			; 00000061H
  00114	72		 DB	 114			; 00000072H
  00115	64		 DB	 100			; 00000064H
  00116	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z ENDP ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1353 :     _CONSTEXPR20_CONTAINER ~_Container_proxy_ptr12() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1354 :         if (_Ptr) {

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	74 15		 je	 SHORT $LN3@Container_

; 1355 :             _Delete_plain_internal(_Al, _Ptr);

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 11		 mov	 edx, DWORD PTR [ecx]
  00025	52		 push	 edx
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00032	83 c4 08	 add	 esp, 8
$LN3@Container_:

; 1356 :         }
; 1357 :     }

  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1339 :     _CONSTEXPR20_CONTAINER _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  0002f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1340 :         // create a new _Container_proxy pointing at _Mycont
; 1341 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00032	6a 01		 push	 1
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00037	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00042	83 c4 04	 add	 esp, 4
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	89 02		 mov	 DWORD PTR [edx], eax

; 1342 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  0004a	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
  00053	83 c4 04	 add	 esp, 4
  00056	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00059	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 02		 mov	 eax, DWORD PTR [edx]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00068	83 c4 08	 add	 esp, 8

; 1343 :         _Mycont._Myproxy = _Ptr;

  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 02		 mov	 eax, DWORD PTR [edx]
  00073	89 01		 mov	 DWORD PTR [ecx], eax

; 1344 :     }

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 c4 08	 add	 esp, 8
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>, COMDAT
; _this$ = ecx

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00018	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0002a	83 c4 04	 add	 esp, 4

; 840  :     }

  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXQAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXQAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	c1 e0 03	 shl	 eax, 3
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00028	83 c4 08	 add	 esp, 8

; 836  :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXQAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>, COMDAT
; _this$ = ecx

; 1395 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z ; std::forward<std::allocator<int> const &>
  00021	83 c4 04	 add	 esp, 4
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ?end@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?end@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ PROC ; std::initializer_list<std::vector<int,std::allocator<int> > >::end, COMDAT
; _this$ = ecx

; 42   :     _NODISCARD constexpr const _Elem* end() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __372D2D08_initializer_list
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   :         return _Last;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 44   :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?end@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ ENDP ; std::initializer_list<std::vector<int,std::allocator<int> > >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ?begin@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?begin@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ PROC ; std::initializer_list<std::vector<int,std::allocator<int> > >::begin, COMDAT
; _this$ = ecx

; 38   :     _NODISCARD constexpr const _Elem* begin() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __372D2D08_initializer_list
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   :         return _First;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]

; 40   :     }

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?begin@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ ENDP ; std::initializer_list<std::vector<int,std::allocator<int> > >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ??0?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@PBV?$vector@HV?$allocator@H@std@@@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First_arg$ = 8					; size = 4
__Last_arg$ = 12					; size = 4
??0?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@PBV?$vector@HV?$allocator@H@std@@@1@0@Z PROC ; std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 36   :         : _First(_First_arg), _Last(_Last_arg) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __372D2D08_initializer_list
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0001e	89 08		 mov	 DWORD PTR [eax], ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  00026	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
??0?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@PBV?$vector@HV?$allocator@H@std@@@1@0@Z ENDP ; std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__autoclassinit2@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00011	50		 push	 eax
  00012	6a 00		 push	 0
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?__autoclassinit2@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1401 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1402 :         return *this;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1403 :     }

  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1397 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1398 :         return *this;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1399 :     }

  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >, COMDAT
; _this$ = ecx

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 c4 04	 add	 esp, 4
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@ABEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@ABEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal, COMDAT
; _this$ = ecx

; 1821 :     _NODISCARD _CONSTEXPR20_CONTAINER const _Alty& _Getal() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1822 :         return _Mypair._Get_first();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first

; 1823 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@ABEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal, COMDAT
; _this$ = ecx

; 1817 :     _NODISCARD _CONSTEXPR20_CONTAINER _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1818 :         return _Mypair._Get_first();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first

; 1819 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength, COMDAT

; 1773 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1774 :         _Xlength_error("vector too long");

  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00012	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1775 :     }

  00017	3b ec		 cmp	 ebp, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?_Xlength@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
tv86 = -44						; size = 4
tv88 = -40						; size = 4
tv90 = -36						; size = 4
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1755 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001c	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001f	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00022	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00025	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00028	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1756 :         auto& _My_data    = _Mypair._Myval2;

  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1757 :         pointer& _Myfirst = _My_data._Myfirst;

  00055	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00058	83 c1 04	 add	 ecx, 4
  0005b	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1758 :         pointer& _Mylast  = _My_data._Mylast;

  0005e	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00061	83 c2 08	 add	 edx, 8
  00064	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1759 :         pointer& _Myend   = _My_data._Myend;

  00067	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0006a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0006d	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1760 : 
; 1761 :         _My_data._Orphan_all();

  00070	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1762 : 
; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00078	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0007b	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0007e	74 62		 je	 SHORT $LN3@Tidy

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00080	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	52		 push	 edx
  0008c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPAV?$vector@HV?$allocator@H@std@@@2@0@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00094	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
  0009c	89 45 dc	 mov	 DWORD PTR tv90[ebp], eax
  0009f	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a2	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000a5	8b 10		 mov	 edx, DWORD PTR [eax]
  000a7	2b 11		 sub	 edx, DWORD PTR [ecx]
  000a9	c1 fa 04	 sar	 edx, 4
  000ac	89 55 d8	 mov	 DWORD PTR tv88[ebp], edx
  000af	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b4	89 4d d4	 mov	 DWORD PTR tv86[ebp], ecx
  000b7	8b 55 d8	 mov	 edx, DWORD PTR tv88[ebp]
  000ba	52		 push	 edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR tv86[ebp]
  000be	50		 push	 eax
  000bf	8b 4d dc	 mov	 ecx, DWORD PTR tv90[ebp]
  000c2	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEXQAV?$vector@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::vector<int,std::allocator<int> > >::deallocate

; 1766 : 
; 1767 :             _Myfirst = nullptr;

  000c7	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000ca	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1768 :             _Mylast  = nullptr;

  000d0	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  000d3	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1769 :             _Myend   = nullptr;

  000d9	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000dc	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1770 :         }
; 1771 :     }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f0	3b ec		 cmp	 ebp, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
  000fb	cc		 int	 3
  000fc	cc		 int	 3
  000fd	cc		 int	 3
  000fe	cc		 int	 3
  000ff	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1717 :     _CONSTEXPR20_CONTAINER void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1718 :         // allocate array with _Newcapacity elements
; 1719 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1720 :         auto& _My_data    = _Mypair._Myval2;
; 1721 :         pointer& _Myfirst = _My_data._Myfirst;
; 1722 :         pointer& _Mylast  = _My_data._Mylast;
; 1723 :         pointer& _Myend   = _My_data._Myend;
; 1724 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1725 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1726 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1727 : 
; 1728 :         if (_Newcapacity > max_size()) {

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size
  00020	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00023	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1729 :             _Xlength();

  00025	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength
$LN2@Buy_nonzer:

; 1730 :         }
; 1731 : 
; 1732 :         _Buy_raw(_Newcapacity);

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw
$LN3@Buy_nonzer:

; 1733 :     }

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Buy_raw@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
tv77 = -28						; size = 4
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw, COMDAT
; _this$ = ecx

; 1701 :     _CONSTEXPR20_CONTAINER void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1702 :         // allocate array with _Newcapacity elements
; 1703 :         auto& _My_data    = _Mypair._Myval2;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1704 :         pointer& _Myfirst = _My_data._Myfirst;

  00033	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00036	83 c1 04	 add	 ecx, 4
  00039	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1705 :         pointer& _Mylast  = _My_data._Mylast;

  0003c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0003f	83 c2 08	 add	 edx, 8
  00042	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1706 :         pointer& _Myend   = _My_data._Myend;

  00045	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00048	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004b	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1707 : 
; 1708 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1709 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1710 : 
; 1711 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
  00056	89 45 e4	 mov	 DWORD PTR tv77[ebp], eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 4d e4	 mov	 ecx, DWORD PTR tv77[ebp]
  00060	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@I@Z ; std::allocator<std::vector<int,std::allocator<int> > >::allocate
  00065	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1712 :         _Myfirst           = _Newvec;

  00068	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0006b	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0006e	89 02		 mov	 DWORD PTR [edx], eax

; 1713 :         _Mylast            = _Newvec;

  00070	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00073	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00076	89 11		 mov	 DWORD PTR [ecx], edx

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  00078	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0007b	c1 e0 04	 shl	 eax, 4
  0007e	03 45 e8	 add	 eax, DWORD PTR __Newvec$[ebp]
  00081	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00084	89 01		 mov	 DWORD PTR [ecx], eax

; 1715 :     }

  00086	83 c4 1c	 add	 esp, 28			; 0000001cH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?_Buy_raw@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPAV?$vector@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPAV?$vector@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
  00020	50		 push	 eax
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@YAXPAV?$vector@HV?$allocator@H@std@@@0@QAV10@AAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1681 :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPAV?$vector@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size, COMDAT
; _this$ = ecx

; 1552 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1553 :         return (_STD min)(

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@ABEABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  0003c	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00041	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00044	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  00047	50		 push	 eax
  00048	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00051	83 c4 08	 add	 esp, 8
  00054	8b 00		 mov	 eax, DWORD PTR [eax]

; 1554 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1555 :     }

  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?max_size@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -28						; size = 4
_$S10$ = -17						; size = 1
__Alproxy$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??1?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 712  :         _Tidy();

  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy

; 713  : #if _ITERATOR_DEBUG_LEVEL != 0
; 714  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
  00047	50		 push	 eax
  00048	8d 4d ef	 lea	 ecx, DWORD PTR _$S10$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$?0V?$vector@HV?$allocator@H@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<int,std::allocator<int> > >
  00050	8d 45 ef	 lea	 eax, DWORD PTR _$S10$[ebp]
  00053	89 45 f4	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 715  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  00056	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0005d	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00060	51		 push	 ecx
  00061	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  0006a	83 c4 08	 add	 esp, 8
  0006d	50		 push	 eax
  0006e	8b 45 f4	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00077	83 c4 08	 add	 esp, 8

; 716  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 717  :     }

  0007a	52		 push	 edx
  0007b	8b cd		 mov	 ecx, ebp
  0007d	50		 push	 eax
  0007e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@vector
  00084	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00089	58		 pop	 eax
  0008a	5a		 pop	 edx
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	33 cd		 xor	 ecx, ebp
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	83 c4 1c	 add	 esp, 28			; 0000001cH
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
  000a3	90		 npad	 1
$LN5@vector:
  000a4	01 00 00 00	 DD	 1
  000a8	00 00 00 00	 DD	 $LN4@vector
$LN4@vector:
  000ac	ef ff ff ff	 DD	 -17			; ffffffefH
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000b8	24		 DB	 36			; 00000024H
  000b9	53		 DB	 83			; 00000053H
  000ba	31		 DB	 49			; 00000031H
  000bb	30		 DB	 48			; 00000030H
  000bc	00		 DB	 0
??1?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
tv133 = -72						; size = 4
tv135 = -68						; size = 4
tv70 = -64						; size = 4
$T2 = -57						; size = 1
$T3 = -56						; size = 1
$T4 = -55						; size = 1
$T5 = -54						; size = 1
$T6 = -53						; size = 1
__Proxy$ = -48						; size = 8
_$S8$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Ilist$ = 8						; size = 8
__Al$ = 16						; size = 4
??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
; _this$ = ecx

; 547  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  00019	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00047	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	89 45 c0	 mov	 DWORD PTR tv70[ebp], eax
  0004d	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00050	51		 push	 ecx
  00051	0f b6 55 cb	 movzx	 edx, BYTE PTR $T6[ebp]
  00055	52		 push	 edx
  00056	8b 4d c0	 mov	 ecx, DWORD PTR tv70[ebp]
  00059	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@HV?$allocator@H@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>

; 548  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal
  00066	50		 push	 eax
  00067	8d 4d e3	 lea	 ecx, DWORD PTR _$S8$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$?0V?$vector@HV?$allocator@H@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<int,std::allocator<int> > >
  0006f	8d 45 e3	 lea	 eax, DWORD PTR _$S8$[ebp]
  00072	89 45 e8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 549  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 e8	 mov	 edx, DWORD PTR __Alproxy$[ebp]
  0007c	52		 push	 edx
  0007d	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00080	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 550  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  0008c	33 c0		 xor	 eax, eax
  0008e	88 45 ca	 mov	 BYTE PTR $T5[ebp], al
  00091	8a 4d c9	 mov	 cl, BYTE PTR $T4[ebp]
  00094	88 4d c8	 mov	 BYTE PTR $T3[ebp], cl
  00097	8a 55 c8	 mov	 dl, BYTE PTR $T3[ebp]
  0009a	88 55 c7	 mov	 BYTE PTR $T2[ebp], dl
  0009d	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  000a0	e8 00 00 00 00	 call	 ?end@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ ; std::initializer_list<std::vector<int,std::allocator<int> > >::end
  000a5	89 45 bc	 mov	 DWORD PTR tv135[ebp], eax
  000a8	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  000ab	e8 00 00 00 00	 call	 ?begin@?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@std@@QBEPBV?$vector@HV?$allocator@H@std@@@2@XZ ; std::initializer_list<std::vector<int,std::allocator<int> > >::begin
  000b0	89 45 b8	 mov	 DWORD PTR tv133[ebp], eax
  000b3	0f b6 45 c7	 movzx	 eax, BYTE PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d bc	 mov	 ecx, DWORD PTR tv135[ebp]
  000bb	51		 push	 ecx
  000bc	8b 55 b8	 mov	 edx, DWORD PTR tv133[ebp]
  000bf	52		 push	 edx
  000c0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBV?$vector@HV?$allocator@H@std@@@std@@@?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@AAEXPBV?$vector@HV?$allocator@H@std@@@1@0Uforward_iterator_tag@1@@Z ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>

; 551  :         _Proxy._Release();

  000c8	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cb	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 552  :     }

  000d0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d7	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000da	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000df	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	52		 push	 edx
  000e3	8b cd		 mov	 ecx, ebp
  000e5	50		 push	 eax
  000e6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@vector
  000ec	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f1	58		 pop	 eax
  000f2	5a		 pop	 edx
  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00102	33 cd		 xor	 ecx, ebp
  00104	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00109	83 c4 48	 add	 esp, 72			; 00000048H
  0010c	3b ec		 cmp	 ebp, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
  00119	0f 1f 00	 npad	 3
$LN8@vector:
  0011c	02 00 00 00	 DD	 2
  00120	00 00 00 00	 DD	 $LN7@vector
$LN7@vector:
  00124	e3 ff ff ff	 DD	 -29			; ffffffe3H
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN4@vector
  00130	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00134	08 00 00 00	 DD	 8
  00138	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  0013c	5f		 DB	 95			; 0000005fH
  0013d	50		 DB	 80			; 00000050H
  0013e	72		 DB	 114			; 00000072H
  0013f	6f		 DB	 111			; 0000006fH
  00140	78		 DB	 120			; 00000078H
  00141	79		 DB	 121			; 00000079H
  00142	00		 DB	 0
$LN4@vector:
  00143	24		 DB	 36			; 00000024H
  00144	53		 DB	 83			; 00000053H
  00145	38		 DB	 56			; 00000038H
  00146	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@QAE@V?$initializer_list@V?$vector@HV?$allocator@H@std@@@std@@@1@ABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@1@@Z ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0000d	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 729  :     }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@I@Z PROC ; std::allocator<std::vector<int,std::allocator<int> > >::allocate, COMDAT
; _this$ = ecx

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00018	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YAII@Z ; std::_Get_size_of_n<16>
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0002a	83 c4 04	 add	 esp, 4

; 840  :     }

  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?allocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEPAV?$vector@HV?$allocator@H@std@@@2@I@Z ENDP ; std::allocator<std::vector<int,std::allocator<int> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEXQAV?$vector@HV?$allocator@H@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEXQAV?$vector@HV?$allocator@H@std@@@2@I@Z PROC ; std::allocator<std::vector<int,std::allocator<int> > >::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	c1 e0 04	 shl	 eax, 4
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00028	83 c4 08	 add	 esp, 8

; 836  :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAEXQAV?$vector@HV?$allocator@H@std@@@2@I@Z ENDP ; std::allocator<std::vector<int,std::allocator<int> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 825  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ?end@?$initializer_list@H@std@@QBEPBHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?end@?$initializer_list@H@std@@QBEPBHXZ PROC		; std::initializer_list<int>::end, COMDAT
; _this$ = ecx

; 42   :     _NODISCARD constexpr const _Elem* end() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __372D2D08_initializer_list
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   :         return _Last;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 44   :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?end@?$initializer_list@H@std@@QBEPBHXZ ENDP		; std::initializer_list<int>::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ?begin@?$initializer_list@H@std@@QBEPBHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?begin@?$initializer_list@H@std@@QBEPBHXZ PROC		; std::initializer_list<int>::begin, COMDAT
; _this$ = ecx

; 38   :     _NODISCARD constexpr const _Elem* begin() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __372D2D08_initializer_list
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   :         return _First;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]

; 40   :     }

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?begin@?$initializer_list@H@std@@QBEPBHXZ ENDP		; std::initializer_list<int>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\initializer_list
;	COMDAT ??0?$initializer_list@H@std@@QAE@PBH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First_arg$ = 8					; size = 4
__Last_arg$ = 12					; size = 4
??0?$initializer_list@H@std@@QAE@PBH0@Z PROC		; std::initializer_list<int>::initializer_list<int>, COMDAT
; _this$ = ecx

; 36   :         : _First(_First_arg), _Last(_Last_arg) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __372D2D08_initializer_list
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0001e	89 08		 mov	 DWORD PTR [eax], ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  00026	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
??0?$initializer_list@H@std@@QAE@PBH0@Z ENDP		; std::initializer_list<int>::initializer_list<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z PROC	; std::vector<int,std::allocator<int> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 10		 push	 16			; 00000010H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z ENDP	; std::vector<int,std::allocator<int> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$allocator@H@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1401 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1402 :         return *this;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1403 :     }

  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$allocator@H@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1397 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1398 :         return *this;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1399 :     }

  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 c4 04	 add	 esp, 4
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@ABEABV?$allocator@H@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@HV?$allocator@H@std@@@std@@ABEABV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT
; _this$ = ecx

; 1821 :     _NODISCARD _CONSTEXPR20_CONTAINER const _Alty& _Getal() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1822 :         return _Mypair._Get_first();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 1823 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@ABEABV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT
; _this$ = ecx

; 1817 :     _NODISCARD _CONSTEXPR20_CONTAINER _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1818 :         return _Mypair._Get_first();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 1819 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 1773 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1774 :         _Xlength_error("vector too long");

  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00012	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1775 :     }

  00017	3b ec		 cmp	 ebp, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ
_TEXT	SEGMENT
tv86 = -44						; size = 4
tv88 = -40						; size = 4
tv90 = -36						; size = 4
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1755 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001c	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001f	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00022	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00025	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00028	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1756 :         auto& _My_data    = _Mypair._Myval2;

  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1757 :         pointer& _Myfirst = _My_data._Myfirst;

  00055	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00058	83 c1 04	 add	 ecx, 4
  0005b	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1758 :         pointer& _Mylast  = _My_data._Mylast;

  0005e	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00061	83 c2 08	 add	 edx, 8
  00064	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1759 :         pointer& _Myend   = _My_data._Myend;

  00067	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0006a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0006d	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1760 : 
; 1761 :         _My_data._Orphan_all();

  00070	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1762 : 
; 1763 :         if (_Myfirst) { // destroy and deallocate old array

  00078	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0007b	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0007e	74 62		 je	 SHORT $LN3@Tidy

; 1764 :             _Destroy(_Myfirst, _Mylast);

  00080	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	52		 push	 edx
  0008c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00094	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  0009c	89 45 dc	 mov	 DWORD PTR tv90[ebp], eax
  0009f	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a2	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000a5	8b 10		 mov	 edx, DWORD PTR [eax]
  000a7	2b 11		 sub	 edx, DWORD PTR [ecx]
  000a9	c1 fa 02	 sar	 edx, 2
  000ac	89 55 d8	 mov	 DWORD PTR tv88[ebp], edx
  000af	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b4	89 4d d4	 mov	 DWORD PTR tv86[ebp], ecx
  000b7	8b 55 d8	 mov	 edx, DWORD PTR tv88[ebp]
  000ba	52		 push	 edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR tv86[ebp]
  000be	50		 push	 eax
  000bf	8b 4d dc	 mov	 ecx, DWORD PTR tv90[ebp]
  000c2	e8 00 00 00 00	 call	 ?deallocate@?$allocator@H@std@@QAEXQAHI@Z ; std::allocator<int>::deallocate

; 1766 : 
; 1767 :             _Myfirst = nullptr;

  000c7	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000ca	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1768 :             _Mylast  = nullptr;

  000d0	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  000d3	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1769 :             _Myend   = nullptr;

  000d9	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000dc	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1770 :         }
; 1771 :     }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f0	3b ec		 cmp	 ebp, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
  000fb	cc		 int	 3
  000fc	cc		 int	 3
  000fd	cc		 int	 3
  000fe	cc		 int	 3
  000ff	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1717 :     _CONSTEXPR20_CONTAINER void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1718 :         // allocate array with _Newcapacity elements
; 1719 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1720 :         auto& _My_data    = _Mypair._Myval2;
; 1721 :         pointer& _Myfirst = _My_data._Myfirst;
; 1722 :         pointer& _Mylast  = _My_data._Mylast;
; 1723 :         pointer& _Myend   = _My_data._Myend;
; 1724 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1725 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1726 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1727 : 
; 1728 :         if (_Newcapacity > max_size()) {

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
  00020	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00023	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1729 :             _Xlength();

  00025	e8 00 00 00 00	 call	 ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN2@Buy_nonzer:

; 1730 :         }
; 1731 : 
; 1732 :         _Buy_raw(_Newcapacity);

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z ; std::vector<int,std::allocator<int> >::_Buy_raw
$LN3@Buy_nonzer:

; 1733 :     }

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv77 = -28						; size = 4
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1701 :     _CONSTEXPR20_CONTAINER void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1702 :         // allocate array with _Newcapacity elements
; 1703 :         auto& _My_data    = _Mypair._Myval2;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1704 :         pointer& _Myfirst = _My_data._Myfirst;

  00033	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00036	83 c1 04	 add	 ecx, 4
  00039	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1705 :         pointer& _Mylast  = _My_data._Mylast;

  0003c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0003f	83 c2 08	 add	 edx, 8
  00042	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1706 :         pointer& _Myend   = _My_data._Myend;

  00045	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00048	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004b	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1707 : 
; 1708 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1709 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1710 : 
; 1711 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00056	89 45 e4	 mov	 DWORD PTR tv77[ebp], eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 4d e4	 mov	 ecx, DWORD PTR tv77[ebp]
  00060	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate
  00065	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1712 :         _Myfirst           = _Newvec;

  00068	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0006b	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0006e	89 02		 mov	 DWORD PTR [edx], eax

; 1713 :         _Mylast            = _Newvec;

  00070	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00073	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00076	89 11		 mov	 DWORD PTR [ecx], edx

; 1714 :         _Myend             = _Newvec + _Newcapacity;

  00078	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0007b	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0007e	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00081	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	89 10		 mov	 DWORD PTR [eax], edx

; 1715 :     }

  00086	83 c4 1c	 add	 esp, 28			; 0000001cH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00020	50		 push	 eax
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1681 :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@AAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 1552 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1553 :         return (_STD min)(

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@ABEABV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  0003c	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00041	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00044	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  00047	50		 push	 eax
  00048	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00051	83 c4 08	 add	 esp, 8
  00054	8b 00		 mov	 eax, DWORD PTR [eax]

; 1554 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1555 :     }

  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -28						; size = 4
_$S13$ = -17						; size = 1
__Alproxy$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 712  :         _Tidy();

  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 713  : #if _ITERATOR_DEBUG_LEVEL != 0
; 714  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00047	50		 push	 eax
  00048	8d 4d ef	 lea	 ecx, DWORD PTR _$S13$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
  00050	8d 45 ef	 lea	 eax, DWORD PTR _$S13$[ebp]
  00053	89 45 f4	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 715  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  00056	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0005d	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00060	51		 push	 ecx
  00061	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  0006a	83 c4 08	 add	 esp, 8
  0006d	50		 push	 eax
  0006e	8b 45 f4	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00077	83 c4 08	 add	 esp, 8

; 716  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 717  :     }

  0007a	52		 push	 edx
  0007b	8b cd		 mov	 ecx, ebp
  0007d	50		 push	 eax
  0007e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@vector
  00084	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00089	58		 pop	 eax
  0008a	5a		 pop	 edx
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	33 cd		 xor	 ecx, ebp
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	83 c4 1c	 add	 esp, 28			; 0000001cH
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
  000a3	90		 npad	 1
$LN5@vector:
  000a4	01 00 00 00	 DD	 1
  000a8	00 00 00 00	 DD	 $LN4@vector
$LN4@vector:
  000ac	ef ff ff ff	 DD	 -17			; ffffffefH
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000b8	24		 DB	 36			; 00000024H
  000b9	53		 DB	 83			; 00000053H
  000ba	31		 DB	 49			; 00000031H
  000bb	33		 DB	 51			; 00000033H
  000bc	00		 DB	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv76 = -92						; size = 4
tv78 = -88						; size = 4
$T2 = -83						; size = 1
$T3 = -82						; size = 1
$T4 = -81						; size = 1
__Guard$5 = -76						; size = 4
__Proxy$ = -64						; size = 8
__Rightlast$ = -52					; size = 4
__Rightfirst$ = -48					; size = 4
__Right_data$ = -44					; size = 4
__My_data$ = -40					; size = 4
_$S9$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 555  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00019	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00047	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	89 45 a8	 mov	 DWORD PTR tv78[ebp], eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@ABEABV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00055	50		 push	 eax
  00056	8d 4d af	 lea	 ecx, DWORD PTR $T4[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction
  0005f	83 c4 08	 add	 esp, 8
  00062	89 45 a4	 mov	 DWORD PTR tv76[ebp], eax
  00065	8a 55 ae	 mov	 dl, BYTE PTR $T3[ebp]
  00068	88 55 ad	 mov	 BYTE PTR $T2[ebp], dl
  0006b	8b 45 a4	 mov	 eax, DWORD PTR tv76[ebp]
  0006e	50		 push	 eax
  0006f	0f b6 4d ad	 movzx	 ecx, BYTE PTR $T2[ebp]
  00073	51		 push	 ecx
  00074	8b 4d a8	 mov	 ecx, DWORD PTR tv78[ebp]
  00077	e8 00 00 00 00	 call	 ??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >

; 556  :         auto&& _Alproxy           = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0007c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00084	50		 push	 eax
  00085	8d 4d e3	 lea	 ecx, DWORD PTR _$S9$[ebp]
  00088	e8 00 00 00 00	 call	 ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
  0008d	8d 55 e3	 lea	 edx, DWORD PTR _$S9$[ebp]
  00090	89 55 e8	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 557  :         auto& _My_data            = _Mypair._Myval2;

  00093	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00096	89 45 d8	 mov	 DWORD PTR __My_data$[ebp], eax

; 558  :         const auto& _Right_data   = _Right._Mypair._Myval2;

  00099	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0009c	89 4d d4	 mov	 DWORD PTR __Right_data$[ebp], ecx

; 559  :         const pointer _Rightfirst = _Right_data._Myfirst;

  0009f	8b 55 d4	 mov	 edx, DWORD PTR __Right_data$[ebp]
  000a2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a5	89 45 d0	 mov	 DWORD PTR __Rightfirst$[ebp], eax

; 560  :         const pointer _Rightlast  = _Right_data._Mylast;

  000a8	8b 4d d4	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  000ab	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ae	89 55 cc	 mov	 DWORD PTR __Rightlast$[ebp], edx

; 561  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  000b1	8b 45 d8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d e8	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  000b8	51		 push	 ecx
  000b9	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000bc	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000c1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 562  :         if (_Rightfirst != _Rightlast) {

  000c8	8b 55 d0	 mov	 edx, DWORD PTR __Rightfirst$[ebp]
  000cb	3b 55 cc	 cmp	 edx, DWORD PTR __Rightlast$[ebp]
  000ce	74 4c		 je	 SHORT $LN2@vector

; 563  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  000d0	8b 45 cc	 mov	 eax, DWORD PTR __Rightlast$[ebp]
  000d3	2b 45 d0	 sub	 eax, DWORD PTR __Rightfirst$[ebp]
  000d6	c1 f8 02	 sar	 eax, 2
  000d9	50		 push	 eax
  000da	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AAEXI@Z ; std::vector<int,std::allocator<int> >::_Buy_raw

; 564  :             _Tidy_guard<vector> _Guard{this};

  000e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	89 4d b4	 mov	 DWORD PTR __Guard$5[ebp], ecx
  000e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 565  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  000ec	8b 55 d8	 mov	 edx, DWORD PTR __My_data$[ebp]
  000ef	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000f2	50		 push	 eax
  000f3	8b 4d cc	 mov	 ecx, DWORD PTR __Rightlast$[ebp]
  000f6	51		 push	 ecx
  000f7	8b 55 d0	 mov	 edx, DWORD PTR __Rightfirst$[ebp]
  000fa	52		 push	 edx
  000fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	e8 00 00 00 00	 call	 ??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
  00103	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00106	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 566  :             _Guard._Target   = nullptr;

  00109	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Guard$5[ebp], 0

; 567  :         }

  00110	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00114	8d 4d b4	 lea	 ecx, DWORD PTR __Guard$5[ebp]
  00117	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
$LN2@vector:

; 568  : 
; 569  :         _Proxy._Release();

  0011c	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0011f	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 570  :     }

  00124	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012b	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0012e	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00133	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00136	52		 push	 edx
  00137	8b cd		 mov	 ecx, ebp
  00139	50		 push	 eax
  0013a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@vector
  00140	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00145	58		 pop	 eax
  00146	5a		 pop	 edx
  00147	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00151	59		 pop	 ecx
  00152	5f		 pop	 edi
  00153	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00156	33 cd		 xor	 ecx, ebp
  00158	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015d	83 c4 5c	 add	 esp, 92			; 0000005cH
  00160	3b ec		 cmp	 ebp, esp
  00162	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
  0016d	0f 1f 00	 npad	 3
$LN11@vector:
  00170	03 00 00 00	 DD	 3
  00174	00 00 00 00	 DD	 $LN10@vector
$LN10@vector:
  00178	e3 ff ff ff	 DD	 -29			; ffffffe3H
  0017c	01 00 00 00	 DD	 1
  00180	00 00 00 00	 DD	 $LN6@vector
  00184	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00188	08 00 00 00	 DD	 8
  0018c	00 00 00 00	 DD	 $LN7@vector
  00190	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00194	04 00 00 00	 DD	 4
  00198	00 00 00 00	 DD	 $LN8@vector
$LN8@vector:
  0019c	5f		 DB	 95			; 0000005fH
  0019d	47		 DB	 71			; 00000047H
  0019e	75		 DB	 117			; 00000075H
  0019f	61		 DB	 97			; 00000061H
  001a0	72		 DB	 114			; 00000072H
  001a1	64		 DB	 100			; 00000064H
  001a2	00		 DB	 0
$LN7@vector:
  001a3	5f		 DB	 95			; 0000005fH
  001a4	50		 DB	 80			; 00000050H
  001a5	72		 DB	 114			; 00000072H
  001a6	6f		 DB	 111			; 0000006fH
  001a7	78		 DB	 120			; 00000078H
  001a8	79		 DB	 121			; 00000079H
  001a9	00		 DB	 0
$LN6@vector:
  001aa	24		 DB	 36			; 00000024H
  001ab	53		 DB	 83			; 00000053H
  001ac	39		 DB	 57			; 00000039H
  001ad	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z$1:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR __Guard$5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
tv133 = -72						; size = 4
tv135 = -68						; size = 4
tv70 = -64						; size = 4
$T2 = -57						; size = 1
$T3 = -56						; size = 1
$T4 = -55						; size = 1
$T5 = -54						; size = 1
$T6 = -53						; size = 1
__Proxy$ = -48						; size = 8
_$S7$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Ilist$ = 8						; size = 8
__Al$ = 16						; size = 4
??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z PROC ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 547  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  00019	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __324884E2_vector
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00047	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	89 45 c0	 mov	 DWORD PTR tv70[ebp], eax
  0004d	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00050	51		 push	 ecx
  00051	0f b6 55 cb	 movzx	 edx, BYTE PTR $T6[ebp]
  00055	52		 push	 edx
  00056	8b 4d c0	 mov	 ecx, DWORD PTR tv70[ebp]
  00059	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>

; 548  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AAEAAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
  00066	50		 push	 eax
  00067	8d 4d e3	 lea	 ecx, DWORD PTR _$S7$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
  0006f	8d 45 e3	 lea	 eax, DWORD PTR _$S7$[ebp]
  00072	89 45 e8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 549  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 e8	 mov	 edx, DWORD PTR __Alproxy$[ebp]
  0007c	52		 push	 edx
  0007d	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00080	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 550  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  0008c	33 c0		 xor	 eax, eax
  0008e	88 45 ca	 mov	 BYTE PTR $T5[ebp], al
  00091	8a 4d c9	 mov	 cl, BYTE PTR $T4[ebp]
  00094	88 4d c8	 mov	 BYTE PTR $T3[ebp], cl
  00097	8a 55 c8	 mov	 dl, BYTE PTR $T3[ebp]
  0009a	88 55 c7	 mov	 BYTE PTR $T2[ebp], dl
  0009d	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  000a0	e8 00 00 00 00	 call	 ?end@?$initializer_list@H@std@@QBEPBHXZ ; std::initializer_list<int>::end
  000a5	89 45 bc	 mov	 DWORD PTR tv135[ebp], eax
  000a8	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  000ab	e8 00 00 00 00	 call	 ?begin@?$initializer_list@H@std@@QBEPBHXZ ; std::initializer_list<int>::begin
  000b0	89 45 b8	 mov	 DWORD PTR tv133[ebp], eax
  000b3	0f b6 45 c7	 movzx	 eax, BYTE PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d bc	 mov	 ecx, DWORD PTR tv135[ebp]
  000bb	51		 push	 ecx
  000bc	8b 55 b8	 mov	 edx, DWORD PTR tv133[ebp]
  000bf	52		 push	 edx
  000c0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>

; 551  :         _Proxy._Release();

  000c8	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cb	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 552  :     }

  000d0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d7	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000da	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000df	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	52		 push	 edx
  000e3	8b cd		 mov	 ecx, ebp
  000e5	50		 push	 eax
  000e6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@vector
  000ec	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f1	58		 pop	 eax
  000f2	5a		 pop	 edx
  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00102	33 cd		 xor	 ecx, ebp
  00104	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00109	83 c4 48	 add	 esp, 72			; 00000048H
  0010c	3b ec		 cmp	 ebp, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
  00119	0f 1f 00	 npad	 3
$LN8@vector:
  0011c	02 00 00 00	 DD	 2
  00120	00 00 00 00	 DD	 $LN7@vector
$LN7@vector:
  00124	e3 ff ff ff	 DD	 -29			; ffffffe3H
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN4@vector
  00130	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00134	08 00 00 00	 DD	 8
  00138	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  0013c	5f		 DB	 95			; 0000005fH
  0013d	50		 DB	 80			; 00000050H
  0013e	72		 DB	 114			; 00000072H
  0013f	6f		 DB	 111			; 0000006fH
  00140	78		 DB	 120			; 00000078H
  00141	79		 DB	 121			; 00000079H
  00142	00		 DB	 0
$LN4@vector:
  00143	24		 DB	 36			; 00000024H
  00144	53		 DB	 83			; 00000053H
  00145	37		 DB	 55			; 00000037H
  00146	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z ENDP ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction, COMDAT

; 731  :     _NODISCARD static _CONSTEXPR20_DYNALLOC _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 732  :         return _Al;

  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 733  :     }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0000d	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 729  :     }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00018	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$03@std@@YAII@Z ; std::_Get_size_of_n<4>
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0002a	83 c4 04	 add	 esp, 4

; 840  :     }

  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXQAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXQAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001b	c1 e0 02	 shl	 eax, 2
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00028	83 c4 08	 add	 esp, 8

; 836  :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXQAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 825  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 44
_this$ = -4						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __D96D2425_xloctime
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 174  :         _Cvt = _Lobj._Getcvt();

  00026	8b f4		 mov	 esi, esp
  00028	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0003f	83 c7 18	 add	 edi, 24			; 00000018H
  00042	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00047	8b f0		 mov	 esi, eax
  00049	f3 a5		 rep movsd

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 57		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  00054	8b f4		 mov	 esi, esp
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0006c	83 c4 04	 add	 esp, 4
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 178  :             _Months =

  00075	8b f4		 mov	 esi, esp
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0008d	83 c4 04	 add	 esp, 4
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0009b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000a0	83 c4 04	 add	 esp, 4
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 181  :         } else {

  000a9	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	83 c0 18	 add	 eax, 24			; 00000018H
  000b1	50		 push	 eax
  000b2	6a 00		 push	 0
  000b4	8b f4		 mov	 esi, esp
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	83 c2 18	 add	 edx, 24			; 00000018H
  000db	52		 push	 edx
  000dc	6a 00		 push	 0
  000de	8b f4		 mov	 esi, esp
  000e0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  000ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00102	83 c2 18	 add	 edx, 24			; 00000018H
  00105	52		 push	 edx
  00106	6a 00		 push	 0
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0010d	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 185  :         }
; 186  :     }

  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	83 c4 30	 add	 esp, 48			; 00000030H
  00120	3b ec		 cmp	 ebp, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 44
_this$ = -4						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __D96D2425_xloctime
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 174  :         _Cvt = _Lobj._Getcvt();

  00026	8b f4		 mov	 esi, esp
  00028	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0003f	83 c7 18	 add	 edi, 24			; 00000018H
  00042	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00047	8b f0		 mov	 esi, eax
  00049	f3 a5		 rep movsd

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 57		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  00054	8b f4		 mov	 esi, esp
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0006c	83 c4 04	 add	 esp, 4
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 178  :             _Months =

  00075	8b f4		 mov	 esi, esp
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0008d	83 c4 04	 add	 esp, 4
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0009b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000a0	83 c4 04	 add	 esp, 4
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 181  :         } else {

  000a9	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	83 c0 18	 add	 eax, 24			; 00000018H
  000b1	50		 push	 eax
  000b2	6a 00		 push	 0
  000b4	8b f4		 mov	 esi, esp
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	83 c2 18	 add	 edx, 24			; 00000018H
  000db	52		 push	 edx
  000dc	6a 00		 push	 0
  000de	8b f4		 mov	 esi, esp
  000e0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  000ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00102	83 c2 18	 add	 edx, 24			; 00000018H
  00105	52		 push	 edx
  00106	6a 00		 push	 0
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0010d	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 185  :         }
; 186  :     }

  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	83 c4 30	 add	 esp, 48			; 00000030H
  00120	3b ec		 cmp	 ebp, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 522  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __D23FE460_xlocale
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 523  :     // convert C string to _Elem sequence using _Cvtvec
; 524  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00026	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _strlen
  0002f	83 c4 04	 add	 esp, 4
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 525  : 
; 526  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  00038	8b f4		 mov	 esi, esp
  0003a	68 0e 02 00 00	 push	 526			; 0000020eH
  0003f	68 00 00 00 00	 push	 OFFSET $SG253180
  00044	6a 02		 push	 2
  00046	6a 01		 push	 1
  00048	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 527  : 
; 528  :     if (!_Ptrdest) {

  0005f	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00063	75 05		 jne	 SHORT $LN5@Maklocstr

; 529  :         _Xbad_alloc();

  00065	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 530  :     }
; 531  : 
; 532  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  0006a	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  0006d	89 55 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], edx
  00070	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00072	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  00075	83 e8 01	 sub	 eax, 1
  00078	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  0007e	83 c1 01	 add	 ecx, 1
  00081	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00084	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00087	83 c2 01	 add	 edx, 1
  0008a	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  0008d	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00091	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 533  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  00093	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00096	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00099	8a 11		 mov	 dl, BYTE PTR [ecx]
  0009b	88 10		 mov	 BYTE PTR [eax], dl

; 534  :     }

  0009d	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 535  : 
; 536  :     return _Ptrdest;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 537  : }

  000a2	5e		 pop	 esi
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB88277_xlocnum
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  0001f	8b f4		 mov	 esi, esp
  00021	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	83 c0 01	 add	 eax, 1
  00038	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  0003b	8b f4		 mov	 esi, esp
  0003d	6a 5d		 push	 93			; 0000005dH
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00044	6a 02		 push	 2
  00046	6a 02		 push	 2
  00048	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 94   : 
; 95   :     if (!_Ptrdest) {

  0005f	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00063	75 05		 jne	 SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

  00065	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0006a	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00071	50		 push	 eax
  00072	8b 4d f8	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _wmemcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  :     return _Ptrdest;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 101  : }

  00081	5e		 pop	 esi
  00082	83 c4 08	 add	 esp, 8
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -72						; size = 8
__Ptrnext$ = -60					; size = 4
__Ptrdest$ = -56					; size = 4
__Mbst1$ = -48						; size = 8
__Wc$ = -32						; size = 2
__Bytes$ = -24						; size = 4
__Ptr1$ = -20						; size = 4
__Wchars$ = -16						; size = 4
__Count1$ = -12						; size = 4
__Count$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 540  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000b	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __D23FE460_xlocale
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 541  :     // convert C string to wchar_t sequence using _Cvtvec
; 542  :     size_t _Count;
; 543  :     size_t _Count1;
; 544  :     size_t _Wchars;
; 545  :     const char* _Ptr1;
; 546  :     int _Bytes;
; 547  :     wchar_t _Wc;
; 548  :     mbstate_t _Mbst1 = {};

  0002b	33 c0		 xor	 eax, eax
  0002d	89 45 d0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  00030	89 45 d4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 549  : 
; 550  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00033	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _strlen
  0003c	83 c4 04	 add	 esp, 4
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 f4	 mov	 DWORD PTR __Count1$[ebp], eax

; 551  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  00045	8b 55 f4	 mov	 edx, DWORD PTR __Count1$[ebp]
  00048	89 55 f8	 mov	 DWORD PTR __Count$[ebp], edx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00052	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00055	89 45 ec	 mov	 DWORD PTR __Ptr1$[ebp], eax
  00058	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005d	2b 4d e8	 sub	 ecx, DWORD PTR __Bytes$[ebp]
  00060	89 4d f8	 mov	 DWORD PTR __Count$[ebp], ecx
  00063	8b 55 ec	 mov	 edx, DWORD PTR __Ptr1$[ebp]
  00066	03 55 e8	 add	 edx, DWORD PTR __Bytes$[ebp]
  00069	89 55 ec	 mov	 DWORD PTR __Ptr1$[ebp], edx
  0006c	8b 45 f0	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0006f	83 c0 01	 add	 eax, 1
  00072	89 45 f0	 mov	 DWORD PTR __Wchars$[ebp], eax
$LN4@Maklocstr:
  00075	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00079	76 29		 jbe	 SHORT $LN3@Maklocstr

; 552  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  0007b	8b 4d 10	 mov	 ecx, DWORD PTR __Cvt$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 55 d0	 lea	 edx, DWORD PTR __Mbst1$[ebp]
  00082	52		 push	 edx
  00083	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00086	50		 push	 eax
  00087	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  0008a	51		 push	 ecx
  0008b	8d 55 e0	 lea	 edx, DWORD PTR __Wc$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 __Mbrtowc
  00094	83 c4 14	 add	 esp, 20			; 00000014H
  00097	89 45 e8	 mov	 DWORD PTR __Bytes$[ebp], eax
  0009a	83 7d e8 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0009e	7f 02		 jg	 SHORT $LN8@Maklocstr

; 553  :             break;

  000a0	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 554  :         }
; 555  :     }

  000a2	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 556  : 
; 557  :     ++_Wchars; // count terminating nul

  000a4	8b 45 f0	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000a7	83 c0 01	 add	 eax, 1
  000aa	89 45 f0	 mov	 DWORD PTR __Wchars$[ebp], eax

; 558  : 
; 559  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  000ad	8b f4		 mov	 esi, esp
  000af	68 2f 02 00 00	 push	 559			; 0000022fH
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000b9	6a 02		 push	 2
  000bb	6a 02		 push	 2
  000bd	8b 4d f0	 mov	 ecx, DWORD PTR __Wchars$[ebp]
  000c0	51		 push	 ecx
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000c7	83 c4 14	 add	 esp, 20			; 00000014H
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	89 45 c8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 560  : 
; 561  :     if (!_Ptrdest) {

  000d4	83 7d c8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000d8	75 05		 jne	 SHORT $LN9@Maklocstr

; 562  :         _Xbad_alloc();

  000da	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 563  :     }
; 564  : 
; 565  :     wchar_t* _Ptrnext = _Ptrdest;

  000df	8b 55 c8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  000e2	89 55 c4	 mov	 DWORD PTR __Ptrnext$[ebp], edx

; 566  :     mbstate_t _Mbst2  = {};

  000e5	33 c0		 xor	 eax, eax
  000e7	89 45 b8	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000ea	89 45 bc	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 567  : 
; 568  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  000ed	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  000ef	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  000f2	2b 4d e8	 sub	 ecx, DWORD PTR __Bytes$[ebp]
  000f5	89 4d f8	 mov	 DWORD PTR __Count$[ebp], ecx
  000f8	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000fb	03 55 e8	 add	 edx, DWORD PTR __Bytes$[ebp]
  000fe	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00101	8b 45 f0	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00104	83 e8 01	 sub	 eax, 1
  00107	89 45 f0	 mov	 DWORD PTR __Wchars$[ebp], eax
  0010a	8b 4d c4	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0010d	83 c1 02	 add	 ecx, 2
  00110	89 4d c4	 mov	 DWORD PTR __Ptrnext$[ebp], ecx
$LN7@Maklocstr:
  00113	83 7d f0 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  00117	76 29		 jbe	 SHORT $LN6@Maklocstr

; 569  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  00119	8b 55 10	 mov	 edx, DWORD PTR __Cvt$[ebp]
  0011c	52		 push	 edx
  0011d	8d 45 b8	 lea	 eax, DWORD PTR __Mbst2$[ebp]
  00120	50		 push	 eax
  00121	8b 4d f4	 mov	 ecx, DWORD PTR __Count1$[ebp]
  00124	51		 push	 ecx
  00125	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00128	52		 push	 edx
  00129	8b 45 c4	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 __Mbrtowc
  00132	83 c4 14	 add	 esp, 20			; 00000014H
  00135	89 45 e8	 mov	 DWORD PTR __Bytes$[ebp], eax
  00138	83 7d e8 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0013c	7f 02		 jg	 SHORT $LN10@Maklocstr

; 570  :             break;

  0013e	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 571  :         }
; 572  :     }

  00140	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:

; 573  : 
; 574  :     *_Ptrnext = L'\0';

  00142	33 c9		 xor	 ecx, ecx
  00144	8b 55 c4	 mov	 edx, DWORD PTR __Ptrnext$[ebp]
  00147	66 89 0a	 mov	 WORD PTR [edx], cx

; 575  : 
; 576  :     return _Ptrdest;

  0014a	8b 45 c8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 577  : }

  0014d	52		 push	 edx
  0014e	8b cd		 mov	 ecx, ebp
  00150	50		 push	 eax
  00151	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@Maklocstr
  00157	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0015c	58		 pop	 eax
  0015d	5a		 pop	 edx
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	33 cd		 xor	 ecx, ebp
  00165	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016a	83 c4 4c	 add	 esp, 76			; 0000004cH
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN16@Maklocstr:
  00178	03 00 00 00	 DD	 3
  0017c	00 00 00 00	 DD	 $LN15@Maklocstr
$LN15@Maklocstr:
  00180	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00184	02 00 00 00	 DD	 2
  00188	00 00 00 00	 DD	 $LN12@Maklocstr
  0018c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00190	08 00 00 00	 DD	 8
  00194	00 00 00 00	 DD	 $LN13@Maklocstr
  00198	b8 ff ff ff	 DD	 -72			; ffffffb8H
  0019c	08 00 00 00	 DD	 8
  001a0	00 00 00 00	 DD	 $LN14@Maklocstr
$LN14@Maklocstr:
  001a4	5f		 DB	 95			; 0000005fH
  001a5	4d		 DB	 77			; 0000004dH
  001a6	62		 DB	 98			; 00000062H
  001a7	73		 DB	 115			; 00000073H
  001a8	74		 DB	 116			; 00000074H
  001a9	32		 DB	 50			; 00000032H
  001aa	00		 DB	 0
$LN13@Maklocstr:
  001ab	5f		 DB	 95			; 0000005fH
  001ac	4d		 DB	 77			; 0000004dH
  001ad	62		 DB	 98			; 00000062H
  001ae	73		 DB	 115			; 00000073H
  001af	74		 DB	 116			; 00000074H
  001b0	31		 DB	 49			; 00000031H
  001b1	00		 DB	 0
$LN12@Maklocstr:
  001b2	5f		 DB	 95			; 0000005fH
  001b3	57		 DB	 87			; 00000057H
  001b4	63		 DB	 99			; 00000063H
  001b5	00		 DB	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv75 = -12						; size = 4
tv77 = -8						; size = 4
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __12269DE6_xutility
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {

  00021	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  00026	0f b6 c0	 movzx	 eax, al
  00029	85 c0		 test	 eax, eax
  0002b	74 30		 je	 SHORT $LN2@Construct_

; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);

  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f8	 mov	 DWORD PTR tv77[ebp], eax
  0003c	8b 55 08	 mov	 edx, DWORD PTR __Obj$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  00045	83 c4 04	 add	 esp, 4
  00048	89 45 f4	 mov	 DWORD PTR tv75[ebp], eax
  0004b	8b 45 f8	 mov	 eax, DWORD PTR tv77[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR tv75[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??$construct_at@U_Container_proxy@std@@PAU_Container_base12@2@X@std@@YAPAU_Container_proxy@0@QAU10@$$QAPAU_Container_base12@0@@Z ; std::construct_at<std::_Container_proxy,std::_Container_base12 *,void>
  00058	83 c4 08	 add	 esp, 8

; 155  :     } else

  0005b	eb 40		 jmp	 SHORT $LN4@Construct_
$LN2@Construct_:

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  0005d	8b 55 08	 mov	 edx, DWORD PTR __Obj$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  00066	83 c4 04	 add	 esp, 4
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
  0006f	83 c4 04	 add	 esp, 4
  00072	50		 push	 eax
  00073	6a 08		 push	 8
  00075	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0007a	83 c4 08	 add	 esp, 8
  0007d	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00080	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	89 4d f0	 mov	 DWORD PTR tv93[ebp], ecx
  00091	8b 55 f0	 mov	 edx, DWORD PTR tv93[ebp]
  00094	52		 push	 edx
  00095	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00098	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
$LN4@Construct_:

; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 159  :     }
; 160  : }

  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E458E21C_xstddef
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 275  :     return __builtin_addressof(_Val);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 276  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1323 :     _CONSTEXPR20_CONTAINER _Basic_container_proxy_ptr12()             = default;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1316 :     _Container_proxy* _Ptr = nullptr;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1323 :     _CONSTEXPR20_CONTAINER _Basic_container_proxy_ptr12()             = default;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1318 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1319 :         _Ptr = nullptr;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1320 :     }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -16						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1095 :     void _Orphan_all_locked_v3() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1096 :         _Lockit _Lock(_LOCK_DEBUG);

  00032	8b f4		 mov	 esi, esp
  00034	6a 03		 push	 3
  00036	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1097 :         _Orphan_all_unlocked_v3();

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1098 :     }

  0004e	8b f4		 mov	 esi, esp
  00050	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	52		 push	 edx
  00061	8b cd		 mov	 ecx, ebp
  00063	50		 push	 eax
  00064	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Orphan_all
  0006a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006f	58		 pop	 eax
  00070	5a		 pop	 edx
  00071	5e		 pop	 esi
  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	83 c4 14	 add	 esp, 20			; 00000014H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
  0008a	66 90		 npad	 2
$LN5@Orphan_all:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN4@Orphan_all
$LN4@Orphan_all:
  00094	f0 ff ff ff	 DD	 -16			; fffffff0H
  00098	04 00 00 00	 DD	 4
  0009c	00 00 00 00	 DD	 $LN3@Orphan_all
$LN3@Orphan_all:
  000a0	5f		 DB	 95			; 0000005fH
  000a1	4c		 DB	 76			; 0000004cH
  000a2	6f		 DB	 111			; 0000006fH
  000a3	63		 DB	 99			; 00000063H
  000a4	6b		 DB	 107			; 0000006bH
  000a5	00		 DB	 0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1237 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1238 :     if (!_Myproxy) { // no proxy, already done

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	75 02		 jne	 SHORT $LN5@Orphan_all

; 1239 :         return;

  00029	eb 3b		 jmp	 SHORT $LN6@Orphan_all
$LN5@Orphan_all:

; 1240 :     }
; 1241 : 
; 1242 :     // proxy allocated, drain it
; 1243 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	83 c2 04	 add	 edx, 4
  00033	89 55 f8	 mov	 DWORD PTR __Pnext$1[ebp], edx
  00036	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  00038	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b 55 f8	 mov	 edx, DWORD PTR __Pnext$1[ebp]
  00040	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00043	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  00045	8b 4d f8	 mov	 ecx, DWORD PTR __Pnext$1[ebp]
  00048	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0004b	74 0d		 je	 SHORT $LN3@Orphan_all

; 1244 :         _Pnext->_Myproxy = nullptr;

  0004d	8b 55 f8	 mov	 edx, DWORD PTR __Pnext$1[ebp]
  00050	8b 02		 mov	 eax, DWORD PTR [edx]
  00052	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1245 :     }

  00058	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1246 :     _Myproxy->_Myfirstiter = nullptr;

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$LN6@Orphan_all:

; 1247 : }

  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1249 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1250 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1251 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1252 :     if (_STD is_constant_evaluated()) {

  00018	e8 00 00 00 00	 call	 ?is_constant_evaluated@std@@YA_NXZ ; std::is_constant_evaluated
  0001d	0f b6 c0	 movzx	 eax, al
  00020	85 c0		 test	 eax, eax
  00022	74 0a		 je	 SHORT $LN2@Orphan_all

; 1253 :         _Orphan_all_unlocked_v3();

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1254 :     } else

  0002c	eb 08		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 1255 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1256 :     {
; 1257 :         _Orphan_all_locked_v3();

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
$LN4@Orphan_all:

; 1258 :     }
; 1259 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1260 : }

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1065 : 
; 1066 :     _Container_base12(const _Container_base12&) = delete;
; 1067 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1068 : 
; 1069 :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept;
; 1070 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1071 : 
; 1072 :     template <class _Alloc>
; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {
; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1075 :         _Construct_in_place(*_New_proxy, this);
; 1076 :         _Myproxy            = _New_proxy;
; 1077 :         _New_proxy->_Mycont = this;
; 1078 :     }
; 1079 : 
; 1080 :     template <class _Alloc>
; 1081 :     _CONSTEXPR20_CONTAINER void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1082 :         // pre: no iterators refer to the existing proxy
; 1083 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1084 :         _Construct_in_place(*_New_proxy, this);
; 1085 :         _New_proxy->_Mycont = this;
; 1086 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1087 :     }
; 1088 : 
; 1089 :     _Container_proxy* _Myproxy = nullptr;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  0001e	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 
; 1058 :     const _Container_base12* _Mycont       = nullptr;
; 1059 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 978  : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 979  :     // convert size_t to size_t, unchanged
; 980  :     return _Len;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 981  : }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 153  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	83 c1 27	 add	 ecx, 39			; 00000027H
  0002a	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0002d	89 0a		 mov	 DWORD PTR [edx], ecx

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  0002f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00037	ba 04 00 00 00	 mov	 edx, 4
  0003c	6b c2 ff	 imul	 eax, edx, -1
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00042	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00045	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 fe	 imul	 ecx, eax, -2
  00050	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00053	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  0005a	75 02		 jne	 SHORT $LN7@Adjust_man
  0005c	eb 5c		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0005e	8b f4		 mov	 esi, esp
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006a	6a 00		 push	 0
  0006c	68 a2 00 00 00	 push	 162			; 000000a2H
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00076	6a 02		 push	 2
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	3b f4		 cmp	 esi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	83 f8 01	 cmp	 eax, 1
  0008b	75 01		 jne	 SHORT $LN19@Adjust_man
  0008d	cc		 int	 3
$LN19@Adjust_man:
  0008e	8b f4		 mov	 esi, esp
  00090	6a 00		 push	 0
  00092	68 a2 00 00 00	 push	 162			; 000000a2H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ac	83 c4 14	 add	 esp, 20			; 00000014H
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	33 c9		 xor	 ecx, ecx
  000b8	75 a4		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000ba	33 d2		 xor	 edx, edx
  000bc	75 8a		 jne	 SHORT $LN4@Adjust_man

; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000be	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c5	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000cd	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d0	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000d4	72 08		 jb	 SHORT $LN13@Adjust_man
  000d6	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000da	77 02		 ja	 SHORT $LN13@Adjust_man
  000dc	eb 5c		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000de	8b f4		 mov	 esi, esp
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000ea	6a 00		 push	 0
  000ec	68 ac 00 00 00	 push	 172			; 000000acH
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000f6	6a 02		 push	 2
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000fe	83 c4 18	 add	 esp, 24			; 00000018H
  00101	3b f4		 cmp	 esi, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	83 f8 01	 cmp	 eax, 1
  0010b	75 01		 jne	 SHORT $LN20@Adjust_man
  0010d	cc		 int	 3
$LN20@Adjust_man:
  0010e	8b f4		 mov	 esi, esp
  00110	6a 00		 push	 0
  00112	68 ac 00 00 00	 push	 172			; 000000acH
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0012c	83 c4 14	 add	 esp, 20			; 00000014H
  0012f	3b f4		 cmp	 esi, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	33 c0		 xor	 eax, eax
  00138	75 a4		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  0013a	33 c9		 xor	 ecx, ecx
  0013c	75 92		 jne	 SHORT $LN10@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00141	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00144	89 02		 mov	 DWORD PTR [edx], eax

; 174  : }

  00146	5e		 pop	 esi
  00147	83 c4 10	 add	 esp, 16			; 00000010H
  0014a	3b ec		 cmp	 ebp, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 84   :         void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __79D216CD_xmemory
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 85   :         return ::operator new(_Bytes);

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 86   :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __FF458F76_exception
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 321  :     _THROW(bad_array_new_length{});

  00025	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00028	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0002d	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00032	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __B0A13A33_vcruntime_exception@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  :         : bad_alloc("bad array new length")

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __B0A13A33_vcruntime_exception@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 129  :         : exception(_Message, 1)

  00018	6a 01		 push	 1
  0001a	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 130  :     {

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B0A13A33_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __B0A13A33_vcruntime_exception@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 04	 add	 ecx, 4
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ___std_exception_destroy
  0002d	83 c4 04	 add	 esp, 4

; 91   :     }

  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __B0A13A33_vcruntime_exception@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00021	33 c9		 xor	 ecx, ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	83 c2 04	 add	 edx, 4
  00029	89 0a		 mov	 DWORD PTR [edx], ecx
  0002b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 c0 04	 add	 eax, 4
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ___std_exception_copy
  00041	83 c4 08	 add	 esp, 8

; 74   :     }

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 c4 04	 add	 esp, 4
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __B0A13A33_vcruntime_exception@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00021	33 c9		 xor	 ecx, ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	83 c2 04	 add	 edx, 4
  00029	89 0a		 mov	 DWORD PTR [edx], ecx
  0002b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 67   :         _Data._What = _Message;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  00034	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 68   :     }

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 167  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __97D3638F_vcruntime_new@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 168  :         (void)_Size;
; 169  :         return _Where;

  0000d	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 170  :     }

  00010	3b ec		 cmp	 ebp, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 556  :     _NODISCARD static constexpr int(max)() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __7FE5F402_limits
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 557  :         return INT_MAX;

  0000d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 558  :     }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xtr1common
;	COMDAT ?is_constant_evaluated@std@@YA_NXZ
_TEXT	SEGMENT
?is_constant_evaluated@std@@YA_NXZ PROC			; std::is_constant_evaluated, COMDAT

; 180  : _NODISCARD constexpr bool is_constant_evaluated() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __47F37C5A_xtr1common
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 181  :     return __builtin_is_constant_evaluated();

  0000d	32 c0		 xor	 al, al

; 182  : }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?is_constant_evaluated@std@@YA_NXZ ENDP			; std::is_constant_evaluated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __534C724A_wchar@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0000d	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00010	d1 e0		 shl	 eax, 1
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _memcpy
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Terrain.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __1792DCCD_Terrain@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Terrain.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __1792DCCD_Terrain@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Terrain.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __1792DCCD_Terrain@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\alex6\OneDrive\Documents\IUT\C++\ProjectC++\rendu2\Terrain.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __1792DCCD_Terrain@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
