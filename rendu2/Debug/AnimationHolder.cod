; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30137.0 

	TITLE	C:\Users\theob\Documents\GitHub\as-pts1\travail\ProjetTutore1\Debug\AnimationHolder.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__97D3638F_vcruntime_new@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__47F37C5A_xtr1common DB 01H
__81812A28_cstddef DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__7FE5F402_limits DB 01H
__589FA321_type_traits DB 01H
__20BB4341_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__DD5FCA34_compare DB 01H
__12269DE6_xutility DB 01H
__C69F69CF_tuple DB 01H
__79D216CD_xmemory DB 01H
__374A57BA_xpolymorphic_allocator@h DB 01H
__0D019051_xstring DB 01H
__B2D2BA86_ctype@h DB 01H
__B7987E10_string DB 01H
__69958C8C_xtree DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__A0B61CF9_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__C34BF88C_memory DB 01H
__60BC708E_cmath DB 01H
__68B92D9D_xbit_ops@h DB 01H
__0F13B0E8_xhash DB 01H
__BFE0F84B_functional DB 01H
__1589CDA2_algorithm DB 01H
__324884E2_vector DB 01H
__B2B5E639_FrameAnimation@hpp DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__1B354CA2_system_error DB 01H
__EF0EAF83_xfacet DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__98EE5594_InputStream@hpp DB 01H
__489ACE24_NonCopyable@hpp DB 01H
__FE33131C_xlocmes DB 01H
__67DA974F_xlocmon DB 01H
__D96D2425_xloctime DB 01H
__54960FDB_Thread@inl DB 01H
__7A0EAAD2_ContextSettings@hpp DB 01H
__A5094FF8_Drawable@hpp DB 01H
__617EE64B_Glyph@hpp DB 01H
__4B7B7884_Font@hpp DB 01H
__EA4E2F0A_AnimationHolder@cpp DB 01H
__68A60A21_locale DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__038A2AA6_iterator DB 01H
__B30C2184_iosfwd DB 01H
__1347750E_utility DB 01H
__E458E21C_xstddef DB 01H
__E273110D_Vector2@inl DB 01H
__23F118AA_Vector2@hpp DB 01H
__6AE60262_Rect@inl DB 01H
__AB640BC5_Rect@hpp DB 01H
__F54903A0_xatomic@h DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG91371 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30133\include\xlocale', 00H
$SG94001 DB	'invalid argument', 00H
	ORG $+3
$SG94002 DB	'%s', 00H
	ORG $+1
$SG94003 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30133\include\xmemory', 00H
$SG94004 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG94005 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG94006 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	_wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp___calloc_dbg:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01eH
	DW	0160H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 44
_this$ = -4						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __D96D2425_xloctime
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 174  :         _Cvt = _Lobj._Getcvt();

  00026	8b f4		 mov	 esi, esp
  00028	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0003f	83 c7 18	 add	 edi, 24			; 00000018H
  00042	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00047	8b f0		 mov	 esi, eax
  00049	f3 a5		 rep movsd

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 57		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  00054	8b f4		 mov	 esi, esp
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0006c	83 c4 04	 add	 esp, 4
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 178  :             _Months =

  00075	8b f4		 mov	 esi, esp
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0008d	83 c4 04	 add	 esp, 4
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0009b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000a0	83 c4 04	 add	 esp, 4
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 181  :         } else {

  000a9	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	83 c0 18	 add	 eax, 24			; 00000018H
  000b1	50		 push	 eax
  000b2	6a 00		 push	 0
  000b4	8b f4		 mov	 esi, esp
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	83 c2 18	 add	 edx, 24			; 00000018H
  000db	52		 push	 edx
  000dc	6a 00		 push	 0
  000de	8b f4		 mov	 esi, esp
  000e0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  000ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00102	83 c2 18	 add	 edx, 24			; 00000018H
  00105	52		 push	 edx
  00106	6a 00		 push	 0
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0010d	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 185  :         }
; 186  :     }

  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	83 c4 30	 add	 esp, 48			; 00000030H
  00120	3b ec		 cmp	 ebp, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 44
_this$ = -4						; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __D96D2425_xloctime
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 174  :         _Cvt = _Lobj._Getcvt();

  00026	8b f4		 mov	 esi, esp
  00028	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0003f	83 c7 18	 add	 edi, 24			; 00000018H
  00042	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00047	8b f0		 mov	 esi, eax
  00049	f3 a5		 rep movsd

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 57		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  00054	8b f4		 mov	 esi, esp
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0006c	83 c4 04	 add	 esp, 4
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 178  :             _Months =

  00075	8b f4		 mov	 esi, esp
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0008d	83 c4 04	 add	 esp, 4
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0009b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  000a0	83 c4 04	 add	 esp, 4
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 181  :         } else {

  000a9	eb 70		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	83 c0 18	 add	 eax, 24			; 00000018H
  000b1	50		 push	 eax
  000b2	6a 00		 push	 0
  000b4	8b f4		 mov	 esi, esp
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	83 c2 18	 add	 edx, 24			; 00000018H
  000db	52		 push	 edx
  000dc	6a 00		 push	 0
  000de	8b f4		 mov	 esi, esp
  000e0	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  000ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00102	83 c2 18	 add	 edx, 24			; 00000018H
  00105	52		 push	 edx
  00106	6a 00		 push	 0
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0010d	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 185  :         }
; 186  :     }

  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	83 c4 30	 add	 esp, 48			; 00000030H
  00120	3b ec		 cmp	 ebp, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 522  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __D23FE460_xlocale
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 523  :     // convert C string to _Elem sequence using _Cvtvec
; 524  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00026	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _strlen
  0002f	83 c4 04	 add	 esp, 4
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 525  : 
; 526  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  00038	8b f4		 mov	 esi, esp
  0003a	68 0e 02 00 00	 push	 526			; 0000020eH
  0003f	68 00 00 00 00	 push	 OFFSET $SG91371
  00044	6a 02		 push	 2
  00046	6a 01		 push	 1
  00048	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 527  : 
; 528  :     if (!_Ptrdest) {

  0005f	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00063	75 05		 jne	 SHORT $LN5@Maklocstr

; 529  :         _Xbad_alloc();

  00065	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 530  :     }
; 531  : 
; 532  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  0006a	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  0006d	89 55 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], edx
  00070	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00072	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  00075	83 e8 01	 sub	 eax, 1
  00078	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  0007e	83 c1 01	 add	 ecx, 1
  00081	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00084	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00087	83 c2 01	 add	 edx, 1
  0008a	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  0008d	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00091	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 533  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  00093	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00096	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00099	8a 11		 mov	 dl, BYTE PTR [ecx]
  0009b	88 10		 mov	 BYTE PTR [eax], dl

; 534  :     }

  0009d	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 535  : 
; 536  :     return _Ptrdest;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 537  : }

  000a2	5e		 pop	 esi
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB88277_xlocnum
  0001a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  0001f	8b f4		 mov	 esi, esp
  00021	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	83 c0 01	 add	 eax, 1
  00038	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  0003b	8b f4		 mov	 esi, esp
  0003d	6a 5d		 push	 93			; 0000005dH
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00044	6a 02		 push	 2
  00046	6a 02		 push	 2
  00048	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00052	83 c4 14	 add	 esp, 20			; 00000014H
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 94   : 
; 95   :     if (!_Ptrdest) {

  0005f	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00063	75 05		 jne	 SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

  00065	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0006a	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00071	50		 push	 eax
  00072	8b 4d f8	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _wmemcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  :     return _Ptrdest;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 101  : }

  00081	5e		 pop	 esi
  00082	83 c4 08	 add	 esp, 8
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -72						; size = 8
__Ptrnext$ = -60					; size = 4
__Ptrdest$ = -56					; size = 4
__Mbst1$ = -48						; size = 8
__Wc$ = -32						; size = 2
__Bytes$ = -24						; size = 4
__Ptr1$ = -20						; size = 4
__Wchars$ = -16						; size = 4
__Count1$ = -12						; size = 4
__Count$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 540  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000b	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __D23FE460_xlocale
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 541  :     // convert C string to wchar_t sequence using _Cvtvec
; 542  :     size_t _Count;
; 543  :     size_t _Count1;
; 544  :     size_t _Wchars;
; 545  :     const char* _Ptr1;
; 546  :     int _Bytes;
; 547  :     wchar_t _Wc;
; 548  :     mbstate_t _Mbst1 = {};

  0002b	33 c0		 xor	 eax, eax
  0002d	89 45 d0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  00030	89 45 d4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 549  : 
; 550  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00033	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _strlen
  0003c	83 c4 04	 add	 esp, 4
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 f4	 mov	 DWORD PTR __Count1$[ebp], eax

; 551  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  00045	8b 55 f4	 mov	 edx, DWORD PTR __Count1$[ebp]
  00048	89 55 f8	 mov	 DWORD PTR __Count$[ebp], edx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00052	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00055	89 45 ec	 mov	 DWORD PTR __Ptr1$[ebp], eax
  00058	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005d	2b 4d e8	 sub	 ecx, DWORD PTR __Bytes$[ebp]
  00060	89 4d f8	 mov	 DWORD PTR __Count$[ebp], ecx
  00063	8b 55 ec	 mov	 edx, DWORD PTR __Ptr1$[ebp]
  00066	03 55 e8	 add	 edx, DWORD PTR __Bytes$[ebp]
  00069	89 55 ec	 mov	 DWORD PTR __Ptr1$[ebp], edx
  0006c	8b 45 f0	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0006f	83 c0 01	 add	 eax, 1
  00072	89 45 f0	 mov	 DWORD PTR __Wchars$[ebp], eax
$LN4@Maklocstr:
  00075	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00079	76 29		 jbe	 SHORT $LN3@Maklocstr

; 552  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  0007b	8b 4d 10	 mov	 ecx, DWORD PTR __Cvt$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 55 d0	 lea	 edx, DWORD PTR __Mbst1$[ebp]
  00082	52		 push	 edx
  00083	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00086	50		 push	 eax
  00087	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  0008a	51		 push	 ecx
  0008b	8d 55 e0	 lea	 edx, DWORD PTR __Wc$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 __Mbrtowc
  00094	83 c4 14	 add	 esp, 20			; 00000014H
  00097	89 45 e8	 mov	 DWORD PTR __Bytes$[ebp], eax
  0009a	83 7d e8 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0009e	7f 02		 jg	 SHORT $LN8@Maklocstr

; 553  :             break;

  000a0	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 554  :         }
; 555  :     }

  000a2	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 556  : 
; 557  :     ++_Wchars; // count terminating nul

  000a4	8b 45 f0	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000a7	83 c0 01	 add	 eax, 1
  000aa	89 45 f0	 mov	 DWORD PTR __Wchars$[ebp], eax

; 558  : 
; 559  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  000ad	8b f4		 mov	 esi, esp
  000af	68 2f 02 00 00	 push	 559			; 0000022fH
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000b9	6a 02		 push	 2
  000bb	6a 02		 push	 2
  000bd	8b 4d f0	 mov	 ecx, DWORD PTR __Wchars$[ebp]
  000c0	51		 push	 ecx
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000c7	83 c4 14	 add	 esp, 20			; 00000014H
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	89 45 c8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 560  : 
; 561  :     if (!_Ptrdest) {

  000d4	83 7d c8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000d8	75 05		 jne	 SHORT $LN9@Maklocstr

; 562  :         _Xbad_alloc();

  000da	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 563  :     }
; 564  : 
; 565  :     wchar_t* _Ptrnext = _Ptrdest;

  000df	8b 55 c8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  000e2	89 55 c4	 mov	 DWORD PTR __Ptrnext$[ebp], edx

; 566  :     mbstate_t _Mbst2  = {};

  000e5	33 c0		 xor	 eax, eax
  000e7	89 45 b8	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000ea	89 45 bc	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 567  : 
; 568  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  000ed	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  000ef	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  000f2	2b 4d e8	 sub	 ecx, DWORD PTR __Bytes$[ebp]
  000f5	89 4d f8	 mov	 DWORD PTR __Count$[ebp], ecx
  000f8	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000fb	03 55 e8	 add	 edx, DWORD PTR __Bytes$[ebp]
  000fe	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00101	8b 45 f0	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00104	83 e8 01	 sub	 eax, 1
  00107	89 45 f0	 mov	 DWORD PTR __Wchars$[ebp], eax
  0010a	8b 4d c4	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0010d	83 c1 02	 add	 ecx, 2
  00110	89 4d c4	 mov	 DWORD PTR __Ptrnext$[ebp], ecx
$LN7@Maklocstr:
  00113	83 7d f0 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  00117	76 29		 jbe	 SHORT $LN6@Maklocstr

; 569  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  00119	8b 55 10	 mov	 edx, DWORD PTR __Cvt$[ebp]
  0011c	52		 push	 edx
  0011d	8d 45 b8	 lea	 eax, DWORD PTR __Mbst2$[ebp]
  00120	50		 push	 eax
  00121	8b 4d f4	 mov	 ecx, DWORD PTR __Count1$[ebp]
  00124	51		 push	 ecx
  00125	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00128	52		 push	 edx
  00129	8b 45 c4	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 __Mbrtowc
  00132	83 c4 14	 add	 esp, 20			; 00000014H
  00135	89 45 e8	 mov	 DWORD PTR __Bytes$[ebp], eax
  00138	83 7d e8 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0013c	7f 02		 jg	 SHORT $LN10@Maklocstr

; 570  :             break;

  0013e	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 571  :         }
; 572  :     }

  00140	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:

; 573  : 
; 574  :     *_Ptrnext = L'\0';

  00142	33 c9		 xor	 ecx, ecx
  00144	8b 55 c4	 mov	 edx, DWORD PTR __Ptrnext$[ebp]
  00147	66 89 0a	 mov	 WORD PTR [edx], cx

; 575  : 
; 576  :     return _Ptrdest;

  0014a	8b 45 c8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 577  : }

  0014d	52		 push	 edx
  0014e	8b cd		 mov	 ecx, ebp
  00150	50		 push	 eax
  00151	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@Maklocstr
  00157	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0015c	58		 pop	 eax
  0015d	5a		 pop	 edx
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	33 cd		 xor	 ecx, ebp
  00165	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016a	83 c4 4c	 add	 esp, 76			; 0000004cH
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN16@Maklocstr:
  00178	03 00 00 00	 DD	 3
  0017c	00 00 00 00	 DD	 $LN15@Maklocstr
$LN15@Maklocstr:
  00180	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00184	02 00 00 00	 DD	 2
  00188	00 00 00 00	 DD	 $LN12@Maklocstr
  0018c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00190	08 00 00 00	 DD	 8
  00194	00 00 00 00	 DD	 $LN13@Maklocstr
  00198	b8 ff ff ff	 DD	 -72			; ffffffb8H
  0019c	08 00 00 00	 DD	 8
  001a0	00 00 00 00	 DD	 $LN14@Maklocstr
$LN14@Maklocstr:
  001a4	5f		 DB	 95			; 0000005fH
  001a5	4d		 DB	 77			; 0000004dH
  001a6	62		 DB	 98			; 00000062H
  001a7	73		 DB	 115			; 00000073H
  001a8	74		 DB	 116			; 00000074H
  001a9	32		 DB	 50			; 00000032H
  001aa	00		 DB	 0
$LN13@Maklocstr:
  001ab	5f		 DB	 95			; 0000005fH
  001ac	4d		 DB	 77			; 0000004dH
  001ad	62		 DB	 98			; 00000062H
  001ae	73		 DB	 115			; 00000073H
  001af	74		 DB	 116			; 00000074H
  001b0	31		 DB	 49			; 00000031H
  001b1	00		 DB	 0
$LN12@Maklocstr:
  001b2	5f		 DB	 95			; 0000005fH
  001b3	57		 DB	 87			; 00000057H
  001b4	63		 DB	 99			; 00000063H
  001b5	00		 DB	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 234  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __93DC0B45_wchar@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0000d	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00010	d1 e0		 shl	 eax, 1
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _memcpy
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  :     }

  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\theob\Documents\GitHub\as-pts1\travail\ProjetTutore1\AnimationHolder.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __EA4E2F0A_AnimationHolder@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\theob\Documents\GitHub\as-pts1\travail\ProjetTutore1\AnimationHolder.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __EA4E2F0A_AnimationHolder@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\theob\Documents\GitHub\as-pts1\travail\ProjetTutore1\AnimationHolder.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __EA4E2F0A_AnimationHolder@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\theob\Documents\GitHub\as-pts1\travail\ProjetTutore1\AnimationHolder.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __EA4E2F0A_AnimationHolder@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
